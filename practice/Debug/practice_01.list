
practice_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a18  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d44  08004d44  00020128  2**0
                  CONTENTS
  4 .ARM          00000000  08004d44  08004d44  00020128  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d44  08004d44  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d48  08004d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08004d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001984  20000128  08004e74  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aac  08004e74  00021aac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d020  00000000  00000000  00020151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022af  00000000  00000000  0002d171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002f420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002ff78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020b2  00000000  00000000  000309d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4be  00000000  00000000  00032a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000969e8  00000000  00000000  0003ef48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5930  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d30  00000000  00000000  000d5980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000128 	.word	0x20000128
 800020c:	00000000 	.word	0x00000000
 8000210:	08004bf0 	.word	0x08004bf0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000012c 	.word	0x2000012c
 800022c:	08004bf0 	.word	0x08004bf0

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fa72 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f858 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f892 	bl	8000364 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000240:	f001 f9b8 	bl	80015b4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000244:	4a19      	ldr	r2, [pc, #100]	; (80002ac <main+0x7c>)
 8000246:	2101      	movs	r1, #1
 8000248:	2001      	movs	r0, #1
 800024a:	f001 faf1 	bl	8001830 <osSemaphoreNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <main+0x80>)
 8000252:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000254:	4a17      	ldr	r2, [pc, #92]	; (80002b4 <main+0x84>)
 8000256:	2102      	movs	r1, #2
 8000258:	2010      	movs	r0, #16
 800025a:	f001 fc43 	bl	8001ae4 <osMessageQueueNew>
 800025e:	4603      	mov	r3, r0
 8000260:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <main+0x88>)
 8000262:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000264:	4a15      	ldr	r2, [pc, #84]	; (80002bc <main+0x8c>)
 8000266:	2100      	movs	r1, #0
 8000268:	4815      	ldr	r0, [pc, #84]	; (80002c0 <main+0x90>)
 800026a:	f001 fa09 	bl	8001680 <osThreadNew>
 800026e:	4603      	mov	r3, r0
 8000270:	4a14      	ldr	r2, [pc, #80]	; (80002c4 <main+0x94>)
 8000272:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000274:	4a14      	ldr	r2, [pc, #80]	; (80002c8 <main+0x98>)
 8000276:	2100      	movs	r1, #0
 8000278:	4814      	ldr	r0, [pc, #80]	; (80002cc <main+0x9c>)
 800027a:	f001 fa01 	bl	8001680 <osThreadNew>
 800027e:	4603      	mov	r3, r0
 8000280:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <main+0xa0>)
 8000282:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000284:	4a13      	ldr	r2, [pc, #76]	; (80002d4 <main+0xa4>)
 8000286:	2100      	movs	r1, #0
 8000288:	4813      	ldr	r0, [pc, #76]	; (80002d8 <main+0xa8>)
 800028a:	f001 f9f9 	bl	8001680 <osThreadNew>
 800028e:	4603      	mov	r3, r0
 8000290:	4a12      	ldr	r2, [pc, #72]	; (80002dc <main+0xac>)
 8000292:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8000294:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <main+0xb0>)
 8000296:	2100      	movs	r1, #0
 8000298:	4812      	ldr	r0, [pc, #72]	; (80002e4 <main+0xb4>)
 800029a:	f001 f9f1 	bl	8001680 <osThreadNew>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <main+0xb8>)
 80002a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002a4:	f001 f9b8 	bl	8001618 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x78>
 80002aa:	bf00      	nop
 80002ac:	08004d24 	.word	0x08004d24
 80002b0:	2000015c 	.word	0x2000015c
 80002b4:	08004d0c 	.word	0x08004d0c
 80002b8:	20000158 	.word	0x20000158
 80002bc:	08004c7c 	.word	0x08004c7c
 80002c0:	08000589 	.word	0x08000589
 80002c4:	20000148 	.word	0x20000148
 80002c8:	08004ca0 	.word	0x08004ca0
 80002cc:	080005b9 	.word	0x080005b9
 80002d0:	2000014c 	.word	0x2000014c
 80002d4:	08004cc4 	.word	0x08004cc4
 80002d8:	080005c9 	.word	0x080005c9
 80002dc:	20000150 	.word	0x20000150
 80002e0:	08004ce8 	.word	0x08004ce8
 80002e4:	080005f9 	.word	0x080005f9
 80002e8:	20000154 	.word	0x20000154

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	; 0x40
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f004 fc70 	bl	8004be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030e:	2302      	movs	r3, #2
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	2301      	movs	r3, #1
 8000314:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000316:	2310      	movs	r3, #16
 8000318:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0318 	add.w	r3, r7, #24
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fd5e 	bl	8000de4 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800032e:	f000 f96b 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	230f      	movs	r3, #15
 8000334:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000336:	2300      	movs	r3, #0
 8000338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f000 ffcc 	bl	80012e8 <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000356:	f000 f957 	bl	8000608 <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	3740      	adds	r7, #64	; 0x40
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000378:	4b31      	ldr	r3, [pc, #196]	; (8000440 <MX_GPIO_Init+0xdc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a30      	ldr	r2, [pc, #192]	; (8000440 <MX_GPIO_Init+0xdc>)
 800037e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b2e      	ldr	r3, [pc, #184]	; (8000440 <MX_GPIO_Init+0xdc>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000390:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <MX_GPIO_Init+0xdc>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a2a      	ldr	r2, [pc, #168]	; (8000440 <MX_GPIO_Init+0xdc>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b28      	ldr	r3, [pc, #160]	; (8000440 <MX_GPIO_Init+0xdc>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0310 	and.w	r3, r3, #16
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b25      	ldr	r3, [pc, #148]	; (8000440 <MX_GPIO_Init+0xdc>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a24      	ldr	r2, [pc, #144]	; (8000440 <MX_GPIO_Init+0xdc>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b22      	ldr	r3, [pc, #136]	; (8000440 <MX_GPIO_Init+0xdc>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003c0:	2200      	movs	r2, #0
 80003c2:	21ff      	movs	r1, #255	; 0xff
 80003c4:	481f      	ldr	r0, [pc, #124]	; (8000444 <MX_GPIO_Init+0xe0>)
 80003c6:	f000 fcc4 	bl	8000d52 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003ca:	2308      	movs	r3, #8
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003ce:	4b1e      	ldr	r3, [pc, #120]	; (8000448 <MX_GPIO_Init+0xe4>)
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	481b      	ldr	r0, [pc, #108]	; (800044c <MX_GPIO_Init+0xe8>)
 80003de:	f000 fb0d 	bl	80009fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003e2:	23ff      	movs	r3, #255	; 0xff
 80003e4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	2301      	movs	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ee:	2302      	movs	r3, #2
 80003f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	4619      	mov	r1, r3
 80003f8:	4812      	ldr	r0, [pc, #72]	; (8000444 <MX_GPIO_Init+0xe0>)
 80003fa:	f000 faff 	bl	80009fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003fe:	2301      	movs	r3, #1
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000402:	4b13      	ldr	r3, [pc, #76]	; (8000450 <MX_GPIO_Init+0xec>)
 8000404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000406:	2302      	movs	r3, #2
 8000408:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4810      	ldr	r0, [pc, #64]	; (8000454 <MX_GPIO_Init+0xf0>)
 8000412:	f000 faf3 	bl	80009fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	2105      	movs	r1, #5
 800041a:	2006      	movs	r0, #6
 800041c:	f000 fab7 	bl	800098e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000420:	2006      	movs	r0, #6
 8000422:	f000 fad0 	bl	80009c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	2105      	movs	r1, #5
 800042a:	2009      	movs	r0, #9
 800042c:	f000 faaf 	bl	800098e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000430:	2009      	movs	r0, #9
 8000432:	f000 fac8 	bl	80009c6 <HAL_NVIC_EnableIRQ>

}
 8000436:	bf00      	nop
 8000438:	3720      	adds	r7, #32
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000
 8000444:	40011000 	.word	0x40011000
 8000448:	10210000 	.word	0x10210000
 800044c:	40011800 	.word	0x40011800
 8000450:	10110000 	.word	0x10110000
 8000454:	40010800 	.word	0x40010800

08000458 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0)
 8000462:	88fb      	ldrh	r3, [r7, #6]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d109      	bne.n	800047c <HAL_GPIO_EXTI_Callback+0x24>
  {
	  if(counter < 9)
 8000468:	4b44      	ldr	r3, [pc, #272]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b08      	cmp	r3, #8
 800046e:	dc11      	bgt.n	8000494 <HAL_GPIO_EXTI_Callback+0x3c>
		  counter++;
 8000470:	4b42      	ldr	r3, [pc, #264]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	4a41      	ldr	r2, [pc, #260]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 8000478:	6013      	str	r3, [r2, #0]
 800047a:	e00b      	b.n	8000494 <HAL_GPIO_EXTI_Callback+0x3c>
  } else if (GPIO_Pin == GPIO_PIN_3)
 800047c:	88fb      	ldrh	r3, [r7, #6]
 800047e:	2b08      	cmp	r3, #8
 8000480:	d108      	bne.n	8000494 <HAL_GPIO_EXTI_Callback+0x3c>
  {
	  if(counter > 0)
 8000482:	4b3e      	ldr	r3, [pc, #248]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	dd04      	ble.n	8000494 <HAL_GPIO_EXTI_Callback+0x3c>
		  counter--;
 800048a:	4b3c      	ldr	r3, [pc, #240]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	3b01      	subs	r3, #1
 8000490:	4a3a      	ldr	r2, [pc, #232]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 8000492:	6013      	str	r3, [r2, #0]
  }

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, digit[0][counter]^1);
 8000494:	4b39      	ldr	r3, [pc, #228]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a39      	ldr	r2, [pc, #228]	; (8000580 <HAL_GPIO_EXTI_Callback+0x128>)
 800049a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049e:	b25b      	sxtb	r3, r3
 80004a0:	f083 0301 	eor.w	r3, r3, #1
 80004a4:	b25b      	sxtb	r3, r3
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	461a      	mov	r2, r3
 80004aa:	2101      	movs	r1, #1
 80004ac:	4835      	ldr	r0, [pc, #212]	; (8000584 <HAL_GPIO_EXTI_Callback+0x12c>)
 80004ae:	f000 fc50 	bl	8000d52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, digit[1][counter]^1);
 80004b2:	4b32      	ldr	r3, [pc, #200]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a32      	ldr	r2, [pc, #200]	; (8000580 <HAL_GPIO_EXTI_Callback+0x128>)
 80004b8:	330a      	adds	r3, #10
 80004ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004be:	b25b      	sxtb	r3, r3
 80004c0:	f083 0301 	eor.w	r3, r3, #1
 80004c4:	b25b      	sxtb	r3, r3
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	461a      	mov	r2, r3
 80004ca:	2102      	movs	r1, #2
 80004cc:	482d      	ldr	r0, [pc, #180]	; (8000584 <HAL_GPIO_EXTI_Callback+0x12c>)
 80004ce:	f000 fc40 	bl	8000d52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, digit[2][counter]^1);
 80004d2:	4b2a      	ldr	r3, [pc, #168]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a2a      	ldr	r2, [pc, #168]	; (8000580 <HAL_GPIO_EXTI_Callback+0x128>)
 80004d8:	3314      	adds	r3, #20
 80004da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004de:	b25b      	sxtb	r3, r3
 80004e0:	f083 0301 	eor.w	r3, r3, #1
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	461a      	mov	r2, r3
 80004ea:	2104      	movs	r1, #4
 80004ec:	4825      	ldr	r0, [pc, #148]	; (8000584 <HAL_GPIO_EXTI_Callback+0x12c>)
 80004ee:	f000 fc30 	bl	8000d52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, digit[3][counter]^1);
 80004f2:	4b22      	ldr	r3, [pc, #136]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a22      	ldr	r2, [pc, #136]	; (8000580 <HAL_GPIO_EXTI_Callback+0x128>)
 80004f8:	331e      	adds	r3, #30
 80004fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004fe:	b25b      	sxtb	r3, r3
 8000500:	f083 0301 	eor.w	r3, r3, #1
 8000504:	b25b      	sxtb	r3, r3
 8000506:	b2db      	uxtb	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	2108      	movs	r1, #8
 800050c:	481d      	ldr	r0, [pc, #116]	; (8000584 <HAL_GPIO_EXTI_Callback+0x12c>)
 800050e:	f000 fc20 	bl	8000d52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, digit[4][counter]^1);
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a1a      	ldr	r2, [pc, #104]	; (8000580 <HAL_GPIO_EXTI_Callback+0x128>)
 8000518:	3328      	adds	r3, #40	; 0x28
 800051a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051e:	b25b      	sxtb	r3, r3
 8000520:	f083 0301 	eor.w	r3, r3, #1
 8000524:	b25b      	sxtb	r3, r3
 8000526:	b2db      	uxtb	r3, r3
 8000528:	461a      	mov	r2, r3
 800052a:	2110      	movs	r1, #16
 800052c:	4815      	ldr	r0, [pc, #84]	; (8000584 <HAL_GPIO_EXTI_Callback+0x12c>)
 800052e:	f000 fc10 	bl	8000d52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, digit[5][counter]^1);
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a12      	ldr	r2, [pc, #72]	; (8000580 <HAL_GPIO_EXTI_Callback+0x128>)
 8000538:	3332      	adds	r3, #50	; 0x32
 800053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053e:	b25b      	sxtb	r3, r3
 8000540:	f083 0301 	eor.w	r3, r3, #1
 8000544:	b25b      	sxtb	r3, r3
 8000546:	b2db      	uxtb	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	2120      	movs	r1, #32
 800054c:	480d      	ldr	r0, [pc, #52]	; (8000584 <HAL_GPIO_EXTI_Callback+0x12c>)
 800054e:	f000 fc00 	bl	8000d52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, digit[6][counter]^1);
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_GPIO_EXTI_Callback+0x124>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <HAL_GPIO_EXTI_Callback+0x128>)
 8000558:	333c      	adds	r3, #60	; 0x3c
 800055a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055e:	b25b      	sxtb	r3, r3
 8000560:	f083 0301 	eor.w	r3, r3, #1
 8000564:	b25b      	sxtb	r3, r3
 8000566:	b2db      	uxtb	r3, r3
 8000568:	461a      	mov	r2, r3
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <HAL_GPIO_EXTI_Callback+0x12c>)
 800056e:	f000 fbf0 	bl	8000d52 <HAL_GPIO_WritePin>
  // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000144 	.word	0x20000144
 8000580:	20000000 	.word	0x20000000
 8000584:	40011000 	.word	0x40011000

08000588 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
     if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000590:	2101      	movs	r1, #1
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <StartDefaultTask+0x28>)
 8000594:	f000 fbc6 	bl	8000d24 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	d104      	bne.n	80005a8 <StartDefaultTask+0x20>
	 {
    	 //osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
    	 osSemaphoreRelease(myBinarySem01Handle);
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <StartDefaultTask+0x2c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fa46 	bl	8001a34 <osSemaphoreRelease>
	 } else
	 {
		// osSemaphoreRelease(myBinarySem01Handle);
	 }

	 osDelay(1);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f001 f913 	bl	80017d4 <osDelay>
     if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 80005ae:	e7ef      	b.n	8000590 <StartDefaultTask+0x8>
 80005b0:	40010800 	.word	0x40010800
 80005b4:	2000015c 	.word	0x2000015c

080005b8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f001 f907 	bl	80017d4 <osDelay>
 80005c6:	e7fb      	b.n	80005c0 <StartTask02+0x8>

080005c8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 80005d0:	2001      	movs	r0, #1
 80005d2:	f001 f8ff 	bl	80017d4 <osDelay>
	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <StartTask03+0x28>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f04f 31ff 	mov.w	r1, #4294967295
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 f9c2 	bl	8001968 <osSemaphoreAcquire>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <StartTask03+0x2c>)
 80005e8:	f000 fbcb 	bl	8000d82 <HAL_GPIO_TogglePin>
	osDelay(1);
 80005ec:	e7f0      	b.n	80005d0 <StartTask03+0x8>
 80005ee:	bf00      	nop
 80005f0:	2000015c 	.word	0x2000015c
 80005f4:	40011000 	.word	0x40011000

080005f8 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f001 f8e7 	bl	80017d4 <osDelay>
 8000606:	e7fb      	b.n	8000600 <StartTask04+0x8>

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <HAL_MspInit+0x4c>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a10      	ldr	r2, [pc, #64]	; (8000660 <HAL_MspInit+0x4c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6193      	str	r3, [r2, #24]
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_MspInit+0x4c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <HAL_MspInit+0x4c>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <HAL_MspInit+0x4c>)
 8000638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063c:	61d3      	str	r3, [r2, #28]
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_MspInit+0x4c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	210f      	movs	r1, #15
 800064e:	f06f 0001 	mvn.w	r0, #1
 8000652:	f000 f99c 	bl	800098e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler+0x4>

08000676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <BusFault_Handler+0x4>

0800067c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <UsageFault_Handler+0x4>

08000682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000692:	f000 f889 	bl	80007a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000696:	f003 f9af 	bl	80039f8 <xTaskGetSchedulerState>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d001      	beq.n	80006a4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80006a0:	f004 f812 	bl	80046c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 fb81 	bl	8000db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80006ba:	2008      	movs	r0, #8
 80006bc:	f000 fb7a 	bl	8000db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	; (8000708 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	; (8000714 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f6:	f7ff ffe5 	bl	80006c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fa:	f004 fa3f 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fd97 	bl	8000230 <main>
  bx lr
 8000702:	4770      	bx	lr
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 800070c:	08004d4c 	.word	0x08004d4c
  ldr r2, =_sbss
 8000710:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8000714:	20001aac 	.word	0x20001aac

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f923 	bl	8000978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	200f      	movs	r0, #15
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff ff6c 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f93b 	bl	80009e2 <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 f903 	bl	800098e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000118 	.word	0x20000118
 80007a0:	20000120 	.word	0x20000120
 80007a4:	2000011c 	.word	0x2000011c

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_IncTick+0x20>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a03      	ldr	r2, [pc, #12]	; (80007c8 <HAL_IncTick+0x20>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000120 	.word	0x20000120
 80007c8:	20000160 	.word	0x20000160

080007cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b02      	ldr	r3, [pc, #8]	; (80007dc <HAL_GetTick+0x10>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	20000160 	.word	0x20000160

080007e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007fc:	4013      	ands	r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800080c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000812:	4a04      	ldr	r2, [pc, #16]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	60d3      	str	r3, [r2, #12]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <__NVIC_GetPriorityGrouping+0x18>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	f003 0307 	and.w	r3, r3, #7
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db0b      	blt.n	800086e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 021f 	and.w	r2, r3, #31
 800085c:	4906      	ldr	r1, [pc, #24]	; (8000878 <__NVIC_EnableIRQ+0x34>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	095b      	lsrs	r3, r3, #5
 8000864:	2001      	movs	r0, #1
 8000866:	fa00 f202 	lsl.w	r2, r0, r2
 800086a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	e000e100 	.word	0xe000e100

0800087c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	db0a      	blt.n	80008a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	b2da      	uxtb	r2, r3
 8000894:	490c      	ldr	r1, [pc, #48]	; (80008c8 <__NVIC_SetPriority+0x4c>)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	0112      	lsls	r2, r2, #4
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	440b      	add	r3, r1
 80008a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a4:	e00a      	b.n	80008bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4908      	ldr	r1, [pc, #32]	; (80008cc <__NVIC_SetPriority+0x50>)
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	f003 030f 	and.w	r3, r3, #15
 80008b2:	3b04      	subs	r3, #4
 80008b4:	0112      	lsls	r2, r2, #4
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	440b      	add	r3, r1
 80008ba:	761a      	strb	r2, [r3, #24]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000e100 	.word	0xe000e100
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	f1c3 0307 	rsb	r3, r3, #7
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	bf28      	it	cs
 80008ee:	2304      	movcs	r3, #4
 80008f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3304      	adds	r3, #4
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	d902      	bls.n	8000900 <NVIC_EncodePriority+0x30>
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3b03      	subs	r3, #3
 80008fe:	e000      	b.n	8000902 <NVIC_EncodePriority+0x32>
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	f04f 32ff 	mov.w	r2, #4294967295
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43da      	mvns	r2, r3
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	401a      	ands	r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000918:	f04f 31ff 	mov.w	r1, #4294967295
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	fa01 f303 	lsl.w	r3, r1, r3
 8000922:	43d9      	mvns	r1, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	4313      	orrs	r3, r2
         );
}
 800092a:	4618      	mov	r0, r3
 800092c:	3724      	adds	r7, #36	; 0x24
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000944:	d301      	bcc.n	800094a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000946:	2301      	movs	r3, #1
 8000948:	e00f      	b.n	800096a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <SysTick_Config+0x40>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000952:	210f      	movs	r1, #15
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f7ff ff90 	bl	800087c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <SysTick_Config+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <SysTick_Config+0x40>)
 8000964:	2207      	movs	r2, #7
 8000966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	e000e010 	.word	0xe000e010

08000978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ff2d 	bl	80007e0 <__NVIC_SetPriorityGrouping>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	4603      	mov	r3, r0
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a0:	f7ff ff42 	bl	8000828 <__NVIC_GetPriorityGrouping>
 80009a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff ff90 	bl	80008d0 <NVIC_EncodePriority>
 80009b0:	4602      	mov	r2, r0
 80009b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff5f 	bl	800087c <__NVIC_SetPriority>
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff35 	bl	8000844 <__NVIC_EnableIRQ>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff ffa2 	bl	8000934 <SysTick_Config>
 80009f0:	4603      	mov	r3, r0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b08b      	sub	sp, #44	; 0x2c
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0e:	e179      	b.n	8000d04 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a10:	2201      	movs	r2, #1
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	69fa      	ldr	r2, [r7, #28]
 8000a20:	4013      	ands	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	f040 8168 	bne.w	8000cfe <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	4a96      	ldr	r2, [pc, #600]	; (8000c8c <HAL_GPIO_Init+0x290>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d05e      	beq.n	8000af6 <HAL_GPIO_Init+0xfa>
 8000a38:	4a94      	ldr	r2, [pc, #592]	; (8000c8c <HAL_GPIO_Init+0x290>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d875      	bhi.n	8000b2a <HAL_GPIO_Init+0x12e>
 8000a3e:	4a94      	ldr	r2, [pc, #592]	; (8000c90 <HAL_GPIO_Init+0x294>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d058      	beq.n	8000af6 <HAL_GPIO_Init+0xfa>
 8000a44:	4a92      	ldr	r2, [pc, #584]	; (8000c90 <HAL_GPIO_Init+0x294>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d86f      	bhi.n	8000b2a <HAL_GPIO_Init+0x12e>
 8000a4a:	4a92      	ldr	r2, [pc, #584]	; (8000c94 <HAL_GPIO_Init+0x298>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d052      	beq.n	8000af6 <HAL_GPIO_Init+0xfa>
 8000a50:	4a90      	ldr	r2, [pc, #576]	; (8000c94 <HAL_GPIO_Init+0x298>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d869      	bhi.n	8000b2a <HAL_GPIO_Init+0x12e>
 8000a56:	4a90      	ldr	r2, [pc, #576]	; (8000c98 <HAL_GPIO_Init+0x29c>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d04c      	beq.n	8000af6 <HAL_GPIO_Init+0xfa>
 8000a5c:	4a8e      	ldr	r2, [pc, #568]	; (8000c98 <HAL_GPIO_Init+0x29c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d863      	bhi.n	8000b2a <HAL_GPIO_Init+0x12e>
 8000a62:	4a8e      	ldr	r2, [pc, #568]	; (8000c9c <HAL_GPIO_Init+0x2a0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d046      	beq.n	8000af6 <HAL_GPIO_Init+0xfa>
 8000a68:	4a8c      	ldr	r2, [pc, #560]	; (8000c9c <HAL_GPIO_Init+0x2a0>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d85d      	bhi.n	8000b2a <HAL_GPIO_Init+0x12e>
 8000a6e:	2b12      	cmp	r3, #18
 8000a70:	d82a      	bhi.n	8000ac8 <HAL_GPIO_Init+0xcc>
 8000a72:	2b12      	cmp	r3, #18
 8000a74:	d859      	bhi.n	8000b2a <HAL_GPIO_Init+0x12e>
 8000a76:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <HAL_GPIO_Init+0x80>)
 8000a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7c:	08000af7 	.word	0x08000af7
 8000a80:	08000ad1 	.word	0x08000ad1
 8000a84:	08000ae3 	.word	0x08000ae3
 8000a88:	08000b25 	.word	0x08000b25
 8000a8c:	08000b2b 	.word	0x08000b2b
 8000a90:	08000b2b 	.word	0x08000b2b
 8000a94:	08000b2b 	.word	0x08000b2b
 8000a98:	08000b2b 	.word	0x08000b2b
 8000a9c:	08000b2b 	.word	0x08000b2b
 8000aa0:	08000b2b 	.word	0x08000b2b
 8000aa4:	08000b2b 	.word	0x08000b2b
 8000aa8:	08000b2b 	.word	0x08000b2b
 8000aac:	08000b2b 	.word	0x08000b2b
 8000ab0:	08000b2b 	.word	0x08000b2b
 8000ab4:	08000b2b 	.word	0x08000b2b
 8000ab8:	08000b2b 	.word	0x08000b2b
 8000abc:	08000b2b 	.word	0x08000b2b
 8000ac0:	08000ad9 	.word	0x08000ad9
 8000ac4:	08000aed 	.word	0x08000aed
 8000ac8:	4a75      	ldr	r2, [pc, #468]	; (8000ca0 <HAL_GPIO_Init+0x2a4>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d013      	beq.n	8000af6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ace:	e02c      	b.n	8000b2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	623b      	str	r3, [r7, #32]
          break;
 8000ad6:	e029      	b.n	8000b2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	3304      	adds	r3, #4
 8000ade:	623b      	str	r3, [r7, #32]
          break;
 8000ae0:	e024      	b.n	8000b2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	3308      	adds	r3, #8
 8000ae8:	623b      	str	r3, [r7, #32]
          break;
 8000aea:	e01f      	b.n	8000b2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	330c      	adds	r3, #12
 8000af2:	623b      	str	r3, [r7, #32]
          break;
 8000af4:	e01a      	b.n	8000b2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000afe:	2304      	movs	r3, #4
 8000b00:	623b      	str	r3, [r7, #32]
          break;
 8000b02:	e013      	b.n	8000b2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d105      	bne.n	8000b18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	611a      	str	r2, [r3, #16]
          break;
 8000b16:	e009      	b.n	8000b2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	615a      	str	r2, [r3, #20]
          break;
 8000b22:	e003      	b.n	8000b2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
          break;
 8000b28:	e000      	b.n	8000b2c <HAL_GPIO_Init+0x130>
          break;
 8000b2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	2bff      	cmp	r3, #255	; 0xff
 8000b30:	d801      	bhi.n	8000b36 <HAL_GPIO_Init+0x13a>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	e001      	b.n	8000b3a <HAL_GPIO_Init+0x13e>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	2bff      	cmp	r3, #255	; 0xff
 8000b40:	d802      	bhi.n	8000b48 <HAL_GPIO_Init+0x14c>
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	e002      	b.n	8000b4e <HAL_GPIO_Init+0x152>
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	3b08      	subs	r3, #8
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	210f      	movs	r1, #15
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	401a      	ands	r2, r3
 8000b60:	6a39      	ldr	r1, [r7, #32]
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 80c1 	beq.w	8000cfe <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b7c:	4b49      	ldr	r3, [pc, #292]	; (8000ca4 <HAL_GPIO_Init+0x2a8>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a48      	ldr	r2, [pc, #288]	; (8000ca4 <HAL_GPIO_Init+0x2a8>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <HAL_GPIO_Init+0x2a8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b94:	4a44      	ldr	r2, [pc, #272]	; (8000ca8 <HAL_GPIO_Init+0x2ac>)
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	089b      	lsrs	r3, r3, #2
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	f003 0303 	and.w	r3, r3, #3
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	220f      	movs	r2, #15
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a3c      	ldr	r2, [pc, #240]	; (8000cac <HAL_GPIO_Init+0x2b0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d01f      	beq.n	8000c00 <HAL_GPIO_Init+0x204>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a3b      	ldr	r2, [pc, #236]	; (8000cb0 <HAL_GPIO_Init+0x2b4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d019      	beq.n	8000bfc <HAL_GPIO_Init+0x200>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a3a      	ldr	r2, [pc, #232]	; (8000cb4 <HAL_GPIO_Init+0x2b8>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d013      	beq.n	8000bf8 <HAL_GPIO_Init+0x1fc>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a39      	ldr	r2, [pc, #228]	; (8000cb8 <HAL_GPIO_Init+0x2bc>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d00d      	beq.n	8000bf4 <HAL_GPIO_Init+0x1f8>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a38      	ldr	r2, [pc, #224]	; (8000cbc <HAL_GPIO_Init+0x2c0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d007      	beq.n	8000bf0 <HAL_GPIO_Init+0x1f4>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a37      	ldr	r2, [pc, #220]	; (8000cc0 <HAL_GPIO_Init+0x2c4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d101      	bne.n	8000bec <HAL_GPIO_Init+0x1f0>
 8000be8:	2305      	movs	r3, #5
 8000bea:	e00a      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bec:	2306      	movs	r3, #6
 8000bee:	e008      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	e006      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e004      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e002      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <HAL_GPIO_Init+0x206>
 8000c00:	2300      	movs	r3, #0
 8000c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c04:	f002 0203 	and.w	r2, r2, #3
 8000c08:	0092      	lsls	r2, r2, #2
 8000c0a:	4093      	lsls	r3, r2
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c12:	4925      	ldr	r1, [pc, #148]	; (8000ca8 <HAL_GPIO_Init+0x2ac>)
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	3302      	adds	r3, #2
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <HAL_GPIO_Init+0x2c8>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4924      	ldr	r1, [pc, #144]	; (8000cc4 <HAL_GPIO_Init+0x2c8>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	600b      	str	r3, [r1, #0]
 8000c38:	e006      	b.n	8000c48 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <HAL_GPIO_Init+0x2c8>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	4920      	ldr	r1, [pc, #128]	; (8000cc4 <HAL_GPIO_Init+0x2c8>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <HAL_GPIO_Init+0x2c8>)
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	491a      	ldr	r1, [pc, #104]	; (8000cc4 <HAL_GPIO_Init+0x2c8>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	604b      	str	r3, [r1, #4]
 8000c60:	e006      	b.n	8000c70 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_GPIO_Init+0x2c8>)
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	4916      	ldr	r1, [pc, #88]	; (8000cc4 <HAL_GPIO_Init+0x2c8>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d025      	beq.n	8000cc8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_GPIO_Init+0x2c8>)
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	4910      	ldr	r1, [pc, #64]	; (8000cc4 <HAL_GPIO_Init+0x2c8>)
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	608b      	str	r3, [r1, #8]
 8000c88:	e025      	b.n	8000cd6 <HAL_GPIO_Init+0x2da>
 8000c8a:	bf00      	nop
 8000c8c:	10320000 	.word	0x10320000
 8000c90:	10310000 	.word	0x10310000
 8000c94:	10220000 	.word	0x10220000
 8000c98:	10210000 	.word	0x10210000
 8000c9c:	10120000 	.word	0x10120000
 8000ca0:	10110000 	.word	0x10110000
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	40010c00 	.word	0x40010c00
 8000cb4:	40011000 	.word	0x40011000
 8000cb8:	40011400 	.word	0x40011400
 8000cbc:	40011800 	.word	0x40011800
 8000cc0:	40011c00 	.word	0x40011c00
 8000cc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_GPIO_Init+0x324>)
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	4913      	ldr	r1, [pc, #76]	; (8000d20 <HAL_GPIO_Init+0x324>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_GPIO_Init+0x324>)
 8000ce4:	68da      	ldr	r2, [r3, #12]
 8000ce6:	490e      	ldr	r1, [pc, #56]	; (8000d20 <HAL_GPIO_Init+0x324>)
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	60cb      	str	r3, [r1, #12]
 8000cee:	e006      	b.n	8000cfe <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_GPIO_Init+0x324>)
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	4909      	ldr	r1, [pc, #36]	; (8000d20 <HAL_GPIO_Init+0x324>)
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3301      	adds	r3, #1
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f47f ae7e 	bne.w	8000a10 <HAL_GPIO_Init+0x14>
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	372c      	adds	r7, #44	; 0x2c
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40010400 	.word	0x40010400

08000d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	4013      	ands	r3, r2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	e001      	b.n	8000d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	807b      	strh	r3, [r7, #2]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d62:	787b      	ldrb	r3, [r7, #1]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d68:	887a      	ldrh	r2, [r7, #2]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d6e:	e003      	b.n	8000d78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	041a      	lsls	r2, r3, #16
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	611a      	str	r2, [r3, #16]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b085      	sub	sp, #20
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d94:	887a      	ldrh	r2, [r7, #2]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	041a      	lsls	r2, r3, #16
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	400b      	ands	r3, r1
 8000da4:	431a      	orrs	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	611a      	str	r2, [r3, #16]
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dc0:	695a      	ldr	r2, [r3, #20]
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d006      	beq.n	8000dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fb40 	bl	8000458 <HAL_GPIO_EXTI_Callback>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40010400 	.word	0x40010400

08000de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e272      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 8087 	beq.w	8000f12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e04:	4b92      	ldr	r3, [pc, #584]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 030c 	and.w	r3, r3, #12
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d00c      	beq.n	8000e2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e10:	4b8f      	ldr	r3, [pc, #572]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 030c 	and.w	r3, r3, #12
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d112      	bne.n	8000e42 <HAL_RCC_OscConfig+0x5e>
 8000e1c:	4b8c      	ldr	r3, [pc, #560]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e28:	d10b      	bne.n	8000e42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2a:	4b89      	ldr	r3, [pc, #548]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d06c      	beq.n	8000f10 <HAL_RCC_OscConfig+0x12c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d168      	bne.n	8000f10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e24c      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e4a:	d106      	bne.n	8000e5a <HAL_RCC_OscConfig+0x76>
 8000e4c:	4b80      	ldr	r3, [pc, #512]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a7f      	ldr	r2, [pc, #508]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	e02e      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10c      	bne.n	8000e7c <HAL_RCC_OscConfig+0x98>
 8000e62:	4b7b      	ldr	r3, [pc, #492]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7a      	ldr	r2, [pc, #488]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	4b78      	ldr	r3, [pc, #480]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a77      	ldr	r2, [pc, #476]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e01d      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e84:	d10c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0xbc>
 8000e86:	4b72      	ldr	r3, [pc, #456]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a71      	ldr	r2, [pc, #452]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b6f      	ldr	r3, [pc, #444]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a6e      	ldr	r2, [pc, #440]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e00b      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000ea0:	4b6b      	ldr	r3, [pc, #428]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a6a      	ldr	r2, [pc, #424]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b68      	ldr	r3, [pc, #416]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a67      	ldr	r2, [pc, #412]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc84 	bl	80007cc <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fc80 	bl	80007cc <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e200      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eda:	4b5d      	ldr	r3, [pc, #372]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0xe4>
 8000ee6:	e014      	b.n	8000f12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fc70 	bl	80007cc <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fc6c 	bl	80007cc <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e1ec      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f02:	4b53      	ldr	r3, [pc, #332]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x10c>
 8000f0e:	e000      	b.n	8000f12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d063      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f1e:	4b4c      	ldr	r3, [pc, #304]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f2a:	4b49      	ldr	r3, [pc, #292]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d11c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x18c>
 8000f36:	4b46      	ldr	r3, [pc, #280]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d116      	bne.n	8000f70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f42:	4b43      	ldr	r3, [pc, #268]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <HAL_RCC_OscConfig+0x176>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d001      	beq.n	8000f5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e1c0      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5a:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4939      	ldr	r1, [pc, #228]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6e:	e03a      	b.n	8000fe6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d020      	beq.n	8000fba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f78:	4b36      	ldr	r3, [pc, #216]	; (8001054 <HAL_RCC_OscConfig+0x270>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fc25 	bl	80007cc <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f86:	f7ff fc21 	bl	80007cc <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e1a1      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	4927      	ldr	r1, [pc, #156]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	600b      	str	r3, [r1, #0]
 8000fb8:	e015      	b.n	8000fe6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <HAL_RCC_OscConfig+0x270>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fc04 	bl	80007cc <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc8:	f7ff fc00 	bl	80007cc <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e180      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d03a      	beq.n	8001068 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d019      	beq.n	800102e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_RCC_OscConfig+0x274>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001000:	f7ff fbe4 	bl	80007cc <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fbe0 	bl	80007cc <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e160      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <HAL_RCC_OscConfig+0x26c>)
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f000 faa6 	bl	8001578 <RCC_Delay>
 800102c:	e01c      	b.n	8001068 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_RCC_OscConfig+0x274>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001034:	f7ff fbca 	bl	80007cc <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800103a:	e00f      	b.n	800105c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800103c:	f7ff fbc6 	bl	80007cc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d908      	bls.n	800105c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e146      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	42420000 	.word	0x42420000
 8001058:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800105c:	4b92      	ldr	r3, [pc, #584]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1e9      	bne.n	800103c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80a6 	beq.w	80011c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107a:	4b8b      	ldr	r3, [pc, #556]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b88      	ldr	r3, [pc, #544]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a87      	ldr	r2, [pc, #540]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b85      	ldr	r3, [pc, #532]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109e:	2301      	movs	r3, #1
 80010a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a2:	4b82      	ldr	r3, [pc, #520]	; (80012ac <HAL_RCC_OscConfig+0x4c8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ae:	4b7f      	ldr	r3, [pc, #508]	; (80012ac <HAL_RCC_OscConfig+0x4c8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a7e      	ldr	r2, [pc, #504]	; (80012ac <HAL_RCC_OscConfig+0x4c8>)
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb87 	bl	80007cc <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c2:	f7ff fb83 	bl	80007cc <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e103      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	4b75      	ldr	r3, [pc, #468]	; (80012ac <HAL_RCC_OscConfig+0x4c8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x312>
 80010e8:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4a6e      	ldr	r2, [pc, #440]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6213      	str	r3, [r2, #32]
 80010f4:	e02d      	b.n	8001152 <HAL_RCC_OscConfig+0x36e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x334>
 80010fe:	4b6a      	ldr	r3, [pc, #424]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a69      	ldr	r2, [pc, #420]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	4b67      	ldr	r3, [pc, #412]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a66      	ldr	r2, [pc, #408]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001110:	f023 0304 	bic.w	r3, r3, #4
 8001114:	6213      	str	r3, [r2, #32]
 8001116:	e01c      	b.n	8001152 <HAL_RCC_OscConfig+0x36e>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b05      	cmp	r3, #5
 800111e:	d10c      	bne.n	800113a <HAL_RCC_OscConfig+0x356>
 8001120:	4b61      	ldr	r3, [pc, #388]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a60      	ldr	r2, [pc, #384]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6213      	str	r3, [r2, #32]
 800112c:	4b5e      	ldr	r3, [pc, #376]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4a5d      	ldr	r2, [pc, #372]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6213      	str	r3, [r2, #32]
 8001138:	e00b      	b.n	8001152 <HAL_RCC_OscConfig+0x36e>
 800113a:	4b5b      	ldr	r3, [pc, #364]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	4a5a      	ldr	r2, [pc, #360]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	6213      	str	r3, [r2, #32]
 8001146:	4b58      	ldr	r3, [pc, #352]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	4a57      	ldr	r2, [pc, #348]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	f023 0304 	bic.w	r3, r3, #4
 8001150:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d015      	beq.n	8001186 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb37 	bl	80007cc <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff fb33 	bl	80007cc <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001170:	4293      	cmp	r3, r2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e0b1      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001178:	4b4b      	ldr	r3, [pc, #300]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0ee      	beq.n	8001162 <HAL_RCC_OscConfig+0x37e>
 8001184:	e014      	b.n	80011b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff fb21 	bl	80007cc <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118e:	f7ff fb1d 	bl	80007cc <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	; 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e09b      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a4:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ee      	bne.n	800118e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d105      	bne.n	80011c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b6:	4b3c      	ldr	r3, [pc, #240]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a3b      	ldr	r2, [pc, #236]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 8087 	beq.w	80012da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011cc:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d061      	beq.n	800129c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d146      	bne.n	800126e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e0:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff faf1 	bl	80007cc <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ee:	f7ff faed 	bl	80007cc <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e06d      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001214:	d108      	bne.n	8001228 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	4921      	ldr	r1, [pc, #132]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a19      	ldr	r1, [r3, #32]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	430b      	orrs	r3, r1
 800123a:	491b      	ldr	r1, [pc, #108]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001246:	f7ff fac1 	bl	80007cc <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800124e:	f7ff fabd 	bl	80007cc <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e03d      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x46a>
 800126c:	e035      	b.n	80012da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_RCC_OscConfig+0x4cc>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff faaa 	bl	80007cc <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff faa6 	bl	80007cc <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e026      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x498>
 800129a:	e01e      	b.n	80012da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d107      	bne.n	80012b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e019      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40007000 	.word	0x40007000
 80012b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_RCC_OscConfig+0x500>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d001      	beq.n	80012da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e0d0      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012fc:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d910      	bls.n	800132c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130a:	4b67      	ldr	r3, [pc, #412]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 0207 	bic.w	r2, r3, #7
 8001312:	4965      	ldr	r1, [pc, #404]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800131a:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d001      	beq.n	800132c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e0b8      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d020      	beq.n	800137a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001344:	4b59      	ldr	r3, [pc, #356]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a58      	ldr	r2, [pc, #352]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800134e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800135c:	4b53      	ldr	r3, [pc, #332]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a52      	ldr	r2, [pc, #328]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001366:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001368:	4b50      	ldr	r3, [pc, #320]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	494d      	ldr	r1, [pc, #308]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d040      	beq.n	8001408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d107      	bne.n	800139e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b47      	ldr	r3, [pc, #284]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d115      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e07f      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d107      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a6:	4b41      	ldr	r3, [pc, #260]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e073      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e06b      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f023 0203 	bic.w	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4936      	ldr	r1, [pc, #216]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d8:	f7ff f9f8 	bl	80007cc <HAL_GetTick>
 80013dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e0:	f7ff f9f4 	bl	80007cc <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e053      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 020c 	and.w	r2, r3, #12
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	429a      	cmp	r2, r3
 8001406:	d1eb      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d210      	bcs.n	8001438 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 0207 	bic.w	r2, r3, #7
 800141e:	4922      	ldr	r1, [pc, #136]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d001      	beq.n	8001438 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e032      	b.n	800149e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4916      	ldr	r1, [pc, #88]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	4313      	orrs	r3, r2
 8001454:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	490e      	ldr	r1, [pc, #56]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	4313      	orrs	r3, r2
 8001474:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001476:	f000 f821 	bl	80014bc <HAL_RCC_GetSysClockFreq>
 800147a:	4602      	mov	r2, r0
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	490a      	ldr	r1, [pc, #40]	; (80014b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001488:	5ccb      	ldrb	r3, [r1, r3]
 800148a:	fa22 f303 	lsr.w	r3, r2, r3
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f956 	bl	8000748 <HAL_InitTick>

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000
 80014ac:	40021000 	.word	0x40021000
 80014b0:	08004d34 	.word	0x08004d34
 80014b4:	20000118 	.word	0x20000118
 80014b8:	2000011c 	.word	0x2000011c

080014bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014bc:	b490      	push	{r4, r7}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_RCC_GetSysClockFreq+0xac>)
 80014c4:	1d3c      	adds	r4, r7, #4
 80014c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014cc:	f240 2301 	movw	r3, #513	; 0x201
 80014d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <HAL_RCC_GetSysClockFreq+0xb0>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d002      	beq.n	80014fc <HAL_RCC_GetSysClockFreq+0x40>
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d003      	beq.n	8001502 <HAL_RCC_GetSysClockFreq+0x46>
 80014fa:	e02b      	b.n	8001554 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014fe:	623b      	str	r3, [r7, #32]
      break;
 8001500:	e02b      	b.n	800155a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	0c9b      	lsrs	r3, r3, #18
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3328      	adds	r3, #40	; 0x28
 800150c:	443b      	add	r3, r7
 800150e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001512:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d012      	beq.n	8001544 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	0c5b      	lsrs	r3, r3, #17
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	3328      	adds	r3, #40	; 0x28
 800152a:	443b      	add	r3, r7
 800152c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001530:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001536:	fb03 f202 	mul.w	r2, r3, r2
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
 8001542:	e004      	b.n	800154e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001548:	fb02 f303 	mul.w	r3, r2, r3
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	623b      	str	r3, [r7, #32]
      break;
 8001552:	e002      	b.n	800155a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001556:	623b      	str	r3, [r7, #32]
      break;
 8001558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800155a:	6a3b      	ldr	r3, [r7, #32]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bc90      	pop	{r4, r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	08004c54 	.word	0x08004c54
 800156c:	40021000 	.word	0x40021000
 8001570:	007a1200 	.word	0x007a1200
 8001574:	003d0900 	.word	0x003d0900

08001578 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <RCC_Delay+0x34>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <RCC_Delay+0x38>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	0a5b      	lsrs	r3, r3, #9
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001594:	bf00      	nop
  }
  while (Delay --);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1e5a      	subs	r2, r3, #1
 800159a:	60fa      	str	r2, [r7, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f9      	bne.n	8001594 <RCC_Delay+0x1c>
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000118 	.word	0x20000118
 80015b0:	10624dd3 	.word	0x10624dd3

080015b4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015ba:	f3ef 8305 	mrs	r3, IPSR
 80015be:	60bb      	str	r3, [r7, #8]
  return(result);
 80015c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10f      	bne.n	80015e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015c6:	f3ef 8310 	mrs	r3, PRIMASK
 80015ca:	607b      	str	r3, [r7, #4]
  return(result);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <osKernelInitialize+0x32>
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <osKernelInitialize+0x60>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d109      	bne.n	80015ee <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80015da:	f3ef 8311 	mrs	r3, BASEPRI
 80015de:	603b      	str	r3, [r7, #0]
  return(result);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80015e6:	f06f 0305 	mvn.w	r3, #5
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	e00c      	b.n	8001608 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <osKernelInitialize+0x60>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d105      	bne.n	8001602 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <osKernelInitialize+0x60>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	e002      	b.n	8001608 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001608:	68fb      	ldr	r3, [r7, #12]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	20000164 	.word	0x20000164

08001618 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800161e:	f3ef 8305 	mrs	r3, IPSR
 8001622:	60bb      	str	r3, [r7, #8]
  return(result);
 8001624:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10f      	bne.n	800164a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800162a:	f3ef 8310 	mrs	r3, PRIMASK
 800162e:	607b      	str	r3, [r7, #4]
  return(result);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <osKernelStart+0x32>
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <osKernelStart+0x64>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d109      	bne.n	8001652 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800163e:	f3ef 8311 	mrs	r3, BASEPRI
 8001642:	603b      	str	r3, [r7, #0]
  return(result);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <osKernelStart+0x3a>
    stat = osErrorISR;
 800164a:	f06f 0305 	mvn.w	r3, #5
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e00e      	b.n	8001670 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <osKernelStart+0x64>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <osKernelStart+0x64>)
 800165c:	2202      	movs	r2, #2
 800165e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001660:	f001 fd7e 	bl	8003160 <vTaskStartScheduler>
      stat = osOK;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e002      	b.n	8001670 <osKernelStart+0x58>
    } else {
      stat = osError;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001670:	68fb      	ldr	r3, [r7, #12]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000164 	.word	0x20000164

08001680 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b092      	sub	sp, #72	; 0x48
 8001684:	af04      	add	r7, sp, #16
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001690:	f3ef 8305 	mrs	r3, IPSR
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 8094 	bne.w	80017c6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800169e:	f3ef 8310 	mrs	r3, PRIMASK
 80016a2:	623b      	str	r3, [r7, #32]
  return(result);
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f040 808d 	bne.w	80017c6 <osThreadNew+0x146>
 80016ac:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <osThreadNew+0x150>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d106      	bne.n	80016c2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80016b4:	f3ef 8311 	mrs	r3, BASEPRI
 80016b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 8082 	bne.w	80017c6 <osThreadNew+0x146>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d07e      	beq.n	80017c6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80016cc:	2318      	movs	r3, #24
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80016d0:	2300      	movs	r3, #0
 80016d2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80016d4:	f107 031b 	add.w	r3, r7, #27
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d045      	beq.n	8001772 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <osThreadNew+0x74>
        name = attr->name;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <osThreadNew+0x9a>
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	2b38      	cmp	r3, #56	; 0x38
 800170c:	d805      	bhi.n	800171a <osThreadNew+0x9a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <osThreadNew+0x9e>
        return (NULL);
 800171a:	2300      	movs	r3, #0
 800171c:	e054      	b.n	80017c8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00e      	beq.n	8001754 <osThreadNew+0xd4>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b5b      	cmp	r3, #91	; 0x5b
 800173c:	d90a      	bls.n	8001754 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <osThreadNew+0xd4>
        mem = 1;
 800174e:	2301      	movs	r3, #1
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
 8001752:	e010      	b.n	8001776 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10c      	bne.n	8001776 <osThreadNew+0xf6>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d108      	bne.n	8001776 <osThreadNew+0xf6>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d104      	bne.n	8001776 <osThreadNew+0xf6>
          mem = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001770:	e001      	b.n	8001776 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001778:	2b01      	cmp	r3, #1
 800177a:	d110      	bne.n	800179e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001784:	9202      	str	r2, [sp, #8]
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001790:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f001 fb18 	bl	8002dc8 <xTaskCreateStatic>
 8001798:	4603      	mov	r3, r0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e013      	b.n	80017c6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d110      	bne.n	80017c6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80017a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f001 fb62 	bl	8002e80 <xTaskCreate>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d001      	beq.n	80017c6 <osThreadNew+0x146>
          hTask = NULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80017c6:	697b      	ldr	r3, [r7, #20]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3738      	adds	r7, #56	; 0x38
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000164 	.word	0x20000164

080017d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017dc:	f3ef 8305 	mrs	r3, IPSR
 80017e0:	613b      	str	r3, [r7, #16]
  return(result);
 80017e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10f      	bne.n	8001808 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017e8:	f3ef 8310 	mrs	r3, PRIMASK
 80017ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d109      	bne.n	8001808 <osDelay+0x34>
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <osDelay+0x58>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d109      	bne.n	8001810 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017fc:	f3ef 8311 	mrs	r3, BASEPRI
 8001800:	60bb      	str	r3, [r7, #8]
  return(result);
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <osDelay+0x3c>
    stat = osErrorISR;
 8001808:	f06f 0305 	mvn.w	r3, #5
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	e007      	b.n	8001820 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <osDelay+0x4c>
      vTaskDelay(ticks);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f001 fc6c 	bl	80030f8 <vTaskDelay>
    }
  }

  return (stat);
 8001820:	697b      	ldr	r3, [r7, #20]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000164 	.word	0x20000164

08001830 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001840:	f3ef 8305 	mrs	r3, IPSR
 8001844:	61bb      	str	r3, [r7, #24]
  return(result);
 8001846:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001848:	2b00      	cmp	r3, #0
 800184a:	f040 8086 	bne.w	800195a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800184e:	f3ef 8310 	mrs	r3, PRIMASK
 8001852:	617b      	str	r3, [r7, #20]
  return(result);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d17f      	bne.n	800195a <osSemaphoreNew+0x12a>
 800185a:	4b42      	ldr	r3, [pc, #264]	; (8001964 <osSemaphoreNew+0x134>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d105      	bne.n	800186e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001862:	f3ef 8311 	mrs	r3, BASEPRI
 8001866:	613b      	str	r3, [r7, #16]
  return(result);
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d175      	bne.n	800195a <osSemaphoreNew+0x12a>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d072      	beq.n	800195a <osSemaphoreNew+0x12a>
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d86e      	bhi.n	800195a <osSemaphoreNew+0x12a>
    mem = -1;
 800187c:	f04f 33ff 	mov.w	r3, #4294967295
 8001880:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d015      	beq.n	80018b4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <osSemaphoreNew+0x6e>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b4f      	cmp	r3, #79	; 0x4f
 8001896:	d902      	bls.n	800189e <osSemaphoreNew+0x6e>
        mem = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	623b      	str	r3, [r7, #32]
 800189c:	e00c      	b.n	80018b8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d108      	bne.n	80018b8 <osSemaphoreNew+0x88>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d104      	bne.n	80018b8 <osSemaphoreNew+0x88>
          mem = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
 80018b2:	e001      	b.n	80018b8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018be:	d04c      	beq.n	800195a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d128      	bne.n	8001918 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d10a      	bne.n	80018e2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2203      	movs	r2, #3
 80018d2:	9200      	str	r2, [sp, #0]
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	2001      	movs	r0, #1
 80018da:	f000 fad3 	bl	8001e84 <xQueueGenericCreateStatic>
 80018de:	6278      	str	r0, [r7, #36]	; 0x24
 80018e0:	e005      	b.n	80018ee <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80018e2:	2203      	movs	r2, #3
 80018e4:	2100      	movs	r1, #0
 80018e6:	2001      	movs	r0, #1
 80018e8:	f000 fb43 	bl	8001f72 <xQueueGenericCreate>
 80018ec:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d022      	beq.n	800193a <osSemaphoreNew+0x10a>
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d01f      	beq.n	800193a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80018fa:	2300      	movs	r3, #0
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001902:	f000 fc01 	bl	8002108 <xQueueGenericSend>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d016      	beq.n	800193a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800190c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800190e:	f001 f88b 	bl	8002a28 <vQueueDelete>
            hSemaphore = NULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
 8001916:	e010      	b.n	800193a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d108      	bne.n	8001930 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	461a      	mov	r2, r3
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 fb84 	bl	8002034 <xQueueCreateCountingSemaphoreStatic>
 800192c:	6278      	str	r0, [r7, #36]	; 0x24
 800192e:	e004      	b.n	800193a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 fbb5 	bl	80020a2 <xQueueCreateCountingSemaphore>
 8001938:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00c      	beq.n	800195a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <osSemaphoreNew+0x11e>
          name = attr->name;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	61fb      	str	r3, [r7, #28]
 800194c:	e001      	b.n	8001952 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001952:	69f9      	ldr	r1, [r7, #28]
 8001954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001956:	f001 f9b1 	bl	8002cbc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800195c:	4618      	mov	r0, r3
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000164 	.word	0x20000164

08001968 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d103      	bne.n	8001988 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8001980:	f06f 0303 	mvn.w	r3, #3
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	e04b      	b.n	8001a20 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001988:	f3ef 8305 	mrs	r3, IPSR
 800198c:	617b      	str	r3, [r7, #20]
  return(result);
 800198e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10f      	bne.n	80019b4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001994:	f3ef 8310 	mrs	r3, PRIMASK
 8001998:	613b      	str	r3, [r7, #16]
  return(result);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d109      	bne.n	80019b4 <osSemaphoreAcquire+0x4c>
 80019a0:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <osSemaphoreAcquire+0xc4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d128      	bne.n	80019fa <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019a8:	f3ef 8311 	mrs	r3, BASEPRI
 80019ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d022      	beq.n	80019fa <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80019ba:	f06f 0303 	mvn.w	r3, #3
 80019be:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80019c0:	e02d      	b.n	8001a1e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	461a      	mov	r2, r3
 80019cc:	2100      	movs	r1, #0
 80019ce:	69b8      	ldr	r0, [r7, #24]
 80019d0:	f000 ffaa 	bl	8002928 <xQueueReceiveFromISR>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d003      	beq.n	80019e2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80019da:	f06f 0302 	mvn.w	r3, #2
 80019de:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80019e0:	e01d      	b.n	8001a1e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01a      	beq.n	8001a1e <osSemaphoreAcquire+0xb6>
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <osSemaphoreAcquire+0xc8>)
 80019ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	f3bf 8f4f 	dsb	sy
 80019f4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80019f8:	e011      	b.n	8001a1e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80019fa:	6839      	ldr	r1, [r7, #0]
 80019fc:	69b8      	ldr	r0, [r7, #24]
 80019fe:	f000 fe87 	bl	8002710 <xQueueSemaphoreTake>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d00b      	beq.n	8001a20 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8001a0e:	f06f 0301 	mvn.w	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	e004      	b.n	8001a20 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8001a16:	f06f 0302 	mvn.w	r3, #2
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	e000      	b.n	8001a20 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8001a1e:	bf00      	nop
      }
    }
  }

  return (stat);
 8001a20:	69fb      	ldr	r3, [r7, #28]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000164 	.word	0x20000164
 8001a30:	e000ed04 	.word	0xe000ed04

08001a34 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8001a4a:	f06f 0303 	mvn.w	r3, #3
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	e03e      	b.n	8001ad0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a52:	f3ef 8305 	mrs	r3, IPSR
 8001a56:	617b      	str	r3, [r7, #20]
  return(result);
 8001a58:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10f      	bne.n	8001a7e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8001a62:	613b      	str	r3, [r7, #16]
  return(result);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <osSemaphoreRelease+0x4a>
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <osSemaphoreRelease+0xa8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d120      	bne.n	8001ab4 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a72:	f3ef 8311 	mrs	r3, BASEPRI
 8001a76:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d01a      	beq.n	8001ab4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	4619      	mov	r1, r3
 8001a88:	69b8      	ldr	r0, [r7, #24]
 8001a8a:	f000 fcd3 	bl	8002434 <xQueueGiveFromISR>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d003      	beq.n	8001a9c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8001a94:	f06f 0302 	mvn.w	r3, #2
 8001a98:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001a9a:	e018      	b.n	8001ace <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d015      	beq.n	8001ace <osSemaphoreRelease+0x9a>
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <osSemaphoreRelease+0xac>)
 8001aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	f3bf 8f4f 	dsb	sy
 8001aae:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001ab2:	e00c      	b.n	8001ace <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	69b8      	ldr	r0, [r7, #24]
 8001abc:	f000 fb24 	bl	8002108 <xQueueGenericSend>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d004      	beq.n	8001ad0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8001ac6:	f06f 0302 	mvn.w	r3, #2
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	e000      	b.n	8001ad0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001ace:	bf00      	nop
    }
  }

  return (stat);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000164 	.word	0x20000164
 8001ae0:	e000ed04 	.word	0xe000ed04

08001ae4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001af4:	f3ef 8305 	mrs	r3, IPSR
 8001af8:	61bb      	str	r3, [r7, #24]
  return(result);
 8001afa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d16f      	bne.n	8001be0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b00:	f3ef 8310 	mrs	r3, PRIMASK
 8001b04:	617b      	str	r3, [r7, #20]
  return(result);
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d169      	bne.n	8001be0 <osMessageQueueNew+0xfc>
 8001b0c:	4b37      	ldr	r3, [pc, #220]	; (8001bec <osMessageQueueNew+0x108>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d105      	bne.n	8001b20 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b14:	f3ef 8311 	mrs	r3, BASEPRI
 8001b18:	613b      	str	r3, [r7, #16]
  return(result);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d15f      	bne.n	8001be0 <osMessageQueueNew+0xfc>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d05c      	beq.n	8001be0 <osMessageQueueNew+0xfc>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d059      	beq.n	8001be0 <osMessageQueueNew+0xfc>
    mem = -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d029      	beq.n	8001b8c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d012      	beq.n	8001b66 <osMessageQueueNew+0x82>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b4f      	cmp	r3, #79	; 0x4f
 8001b46:	d90e      	bls.n	8001b66 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00a      	beq.n	8001b66 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d302      	bcc.n	8001b66 <osMessageQueueNew+0x82>
        mem = 1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	623b      	str	r3, [r7, #32]
 8001b64:	e014      	b.n	8001b90 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d110      	bne.n	8001b90 <osMessageQueueNew+0xac>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10c      	bne.n	8001b90 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d108      	bne.n	8001b90 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d104      	bne.n	8001b90 <osMessageQueueNew+0xac>
          mem = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
 8001b8a:	e001      	b.n	8001b90 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d10b      	bne.n	8001bae <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	9100      	str	r1, [sp, #0]
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 f96d 	bl	8001e84 <xQueueGenericCreateStatic>
 8001baa:	6278      	str	r0, [r7, #36]	; 0x24
 8001bac:	e008      	b.n	8001bc0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f9da 	bl	8001f72 <xQueueGenericCreate>
 8001bbe:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00c      	beq.n	8001be0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <osMessageQueueNew+0xf0>
        name = attr->name;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	e001      	b.n	8001bd8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001bd8:	69f9      	ldr	r1, [r7, #28]
 8001bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bdc:	f001 f86e 	bl	8002cbc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3728      	adds	r7, #40	; 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000164 	.word	0x20000164

08001bf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <vApplicationGetIdleTaskMemory+0x28>)
 8001c00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <vApplicationGetIdleTaskMemory+0x2c>)
 8001c06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	601a      	str	r2, [r3, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	20000168 	.word	0x20000168
 8001c1c:	200001c4 	.word	0x200001c4

08001c20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <vApplicationGetTimerTaskMemory+0x2c>)
 8001c30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <vApplicationGetTimerTaskMemory+0x30>)
 8001c36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c3e:	601a      	str	r2, [r3, #0]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	200003c4 	.word	0x200003c4
 8001c50:	20000420 	.word	0x20000420

08001c54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f103 0208 	add.w	r2, r3, #8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f103 0208 	add.w	r2, r3, #8
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f103 0208 	add.w	r2, r3, #8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	601a      	str	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d06:	d103      	bne.n	8001d10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e00c      	b.n	8001d2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3308      	adds	r3, #8
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	e002      	b.n	8001d1e <vListInsert+0x2e>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d2f6      	bcs.n	8001d18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	601a      	str	r2, [r3, #0]
}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6892      	ldr	r2, [r2, #8]
 8001d76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6852      	ldr	r2, [r2, #4]
 8001d80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d103      	bne.n	8001d94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	1e5a      	subs	r2, r3, #1
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
	...

08001db4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dcc:	f383 8811 	msr	BASEPRI, r3
 8001dd0:	f3bf 8f6f 	isb	sy
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001dda:	bf00      	nop
 8001ddc:	e7fe      	b.n	8001ddc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001dde:	f002 fbf5 	bl	80045cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dea:	68f9      	ldr	r1, [r7, #12]
 8001dec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	441a      	add	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	68f9      	ldr	r1, [r7, #12]
 8001e12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	441a      	add	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	22ff      	movs	r2, #255	; 0xff
 8001e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	22ff      	movs	r2, #255	; 0xff
 8001e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d114      	bne.n	8001e5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01a      	beq.n	8001e72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3310      	adds	r3, #16
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 fc17 	bl	8003674 <xTaskRemoveFromEventList>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d012      	beq.n	8001e72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <xQueueGenericReset+0xcc>)
 8001e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	f3bf 8f6f 	isb	sy
 8001e5c:	e009      	b.n	8001e72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3310      	adds	r3, #16
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fef6 	bl	8001c54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3324      	adds	r3, #36	; 0x24
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fef1 	bl	8001c54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e72:	f002 fbdb 	bl	800462c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	e000ed04 	.word	0xe000ed04

08001e84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08e      	sub	sp, #56	; 0x38
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10a      	bne.n	8001eae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9c:	f383 8811 	msr	BASEPRI, r3
 8001ea0:	f3bf 8f6f 	isb	sy
 8001ea4:	f3bf 8f4f 	dsb	sy
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001eaa:	bf00      	nop
 8001eac:	e7fe      	b.n	8001eac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10a      	bne.n	8001eca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb8:	f383 8811 	msr	BASEPRI, r3
 8001ebc:	f3bf 8f6f 	isb	sy
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001ec6:	bf00      	nop
 8001ec8:	e7fe      	b.n	8001ec8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <xQueueGenericCreateStatic+0x52>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <xQueueGenericCreateStatic+0x56>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <xQueueGenericCreateStatic+0x58>
 8001eda:	2300      	movs	r3, #0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10a      	bne.n	8001ef6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee4:	f383 8811 	msr	BASEPRI, r3
 8001ee8:	f3bf 8f6f 	isb	sy
 8001eec:	f3bf 8f4f 	dsb	sy
 8001ef0:	623b      	str	r3, [r7, #32]
}
 8001ef2:	bf00      	nop
 8001ef4:	e7fe      	b.n	8001ef4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <xQueueGenericCreateStatic+0x7e>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <xQueueGenericCreateStatic+0x82>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <xQueueGenericCreateStatic+0x84>
 8001f06:	2300      	movs	r3, #0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10a      	bne.n	8001f22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f10:	f383 8811 	msr	BASEPRI, r3
 8001f14:	f3bf 8f6f 	isb	sy
 8001f18:	f3bf 8f4f 	dsb	sy
 8001f1c:	61fb      	str	r3, [r7, #28]
}
 8001f1e:	bf00      	nop
 8001f20:	e7fe      	b.n	8001f20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001f22:	2350      	movs	r3, #80	; 0x50
 8001f24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b50      	cmp	r3, #80	; 0x50
 8001f2a:	d00a      	beq.n	8001f42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f30:	f383 8811 	msr	BASEPRI, r3
 8001f34:	f3bf 8f6f 	isb	sy
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	61bb      	str	r3, [r7, #24]
}
 8001f3e:	bf00      	nop
 8001f40:	e7fe      	b.n	8001f40 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00d      	beq.n	8001f68 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f54:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f843 	bl	8001fee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3730      	adds	r7, #48	; 0x30
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b08a      	sub	sp, #40	; 0x28
 8001f76:	af02      	add	r7, sp, #8
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10a      	bne.n	8001f9c <xQueueGenericCreate+0x2a>
	__asm volatile
 8001f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8a:	f383 8811 	msr	BASEPRI, r3
 8001f8e:	f3bf 8f6f 	isb	sy
 8001f92:	f3bf 8f4f 	dsb	sy
 8001f96:	613b      	str	r3, [r7, #16]
}
 8001f98:	bf00      	nop
 8001f9a:	e7fe      	b.n	8001f9a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e004      	b.n	8001fb2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3350      	adds	r3, #80	; 0x50
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 fc08 	bl	80047cc <pvPortMalloc>
 8001fbc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00f      	beq.n	8001fe4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	3350      	adds	r3, #80	; 0x50
 8001fc8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001fd2:	79fa      	ldrb	r2, [r7, #7]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f805 	bl	8001fee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
	}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3720      	adds	r7, #32
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e002      	b.n	8002010 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800201c:	2101      	movs	r1, #1
 800201e:	69b8      	ldr	r0, [r7, #24]
 8002020:	f7ff fec8 	bl	8001db4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10a      	bne.n	800205c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204a:	f383 8811 	msr	BASEPRI, r3
 800204e:	f3bf 8f6f 	isb	sy
 8002052:	f3bf 8f4f 	dsb	sy
 8002056:	61bb      	str	r3, [r7, #24]
}
 8002058:	bf00      	nop
 800205a:	e7fe      	b.n	800205a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d90a      	bls.n	800207a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	617b      	str	r3, [r7, #20]
}
 8002076:	bf00      	nop
 8002078:	e7fe      	b.n	8002078 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800207a:	2302      	movs	r3, #2
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f7ff fefd 	bl	8001e84 <xQueueGenericCreateStatic>
 800208a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002098:	69fb      	ldr	r3, [r7, #28]
	}
 800209a:	4618      	mov	r0, r3
 800209c:	3720      	adds	r7, #32
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10a      	bne.n	80020c8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80020b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b6:	f383 8811 	msr	BASEPRI, r3
 80020ba:	f3bf 8f6f 	isb	sy
 80020be:	f3bf 8f4f 	dsb	sy
 80020c2:	613b      	str	r3, [r7, #16]
}
 80020c4:	bf00      	nop
 80020c6:	e7fe      	b.n	80020c6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d90a      	bls.n	80020e6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80020d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d4:	f383 8811 	msr	BASEPRI, r3
 80020d8:	f3bf 8f6f 	isb	sy
 80020dc:	f3bf 8f4f 	dsb	sy
 80020e0:	60fb      	str	r3, [r7, #12]
}
 80020e2:	bf00      	nop
 80020e4:	e7fe      	b.n	80020e4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80020e6:	2202      	movs	r2, #2
 80020e8:	2100      	movs	r1, #0
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff41 	bl	8001f72 <xQueueGenericCreate>
 80020f0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80020fe:	697b      	ldr	r3, [r7, #20]
	}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08e      	sub	sp, #56	; 0x38
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002116:	2300      	movs	r3, #0
 8002118:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10a      	bne.n	800213a <xQueueGenericSend+0x32>
	__asm volatile
 8002124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	f3bf 8f6f 	isb	sy
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002136:	bf00      	nop
 8002138:	e7fe      	b.n	8002138 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d103      	bne.n	8002148 <xQueueGenericSend+0x40>
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <xQueueGenericSend+0x44>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <xQueueGenericSend+0x46>
 800214c:	2300      	movs	r3, #0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10a      	bne.n	8002168 <xQueueGenericSend+0x60>
	__asm volatile
 8002152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002164:	bf00      	nop
 8002166:	e7fe      	b.n	8002166 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d103      	bne.n	8002176 <xQueueGenericSend+0x6e>
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <xQueueGenericSend+0x72>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <xQueueGenericSend+0x74>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10a      	bne.n	8002196 <xQueueGenericSend+0x8e>
	__asm volatile
 8002180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002184:	f383 8811 	msr	BASEPRI, r3
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	623b      	str	r3, [r7, #32]
}
 8002192:	bf00      	nop
 8002194:	e7fe      	b.n	8002194 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002196:	f001 fc2f 	bl	80039f8 <xTaskGetSchedulerState>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <xQueueGenericSend+0x9e>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <xQueueGenericSend+0xa2>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <xQueueGenericSend+0xa4>
 80021aa:	2300      	movs	r3, #0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80021b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	61fb      	str	r3, [r7, #28]
}
 80021c2:	bf00      	nop
 80021c4:	e7fe      	b.n	80021c4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021c6:	f002 fa01 	bl	80045cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d302      	bcc.n	80021dc <xQueueGenericSend+0xd4>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d129      	bne.n	8002230 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021e2:	f000 fc5b 	bl	8002a9c <prvCopyDataToQueue>
 80021e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d010      	beq.n	8002212 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	3324      	adds	r3, #36	; 0x24
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 fa3d 	bl	8003674 <xTaskRemoveFromEventList>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d013      	beq.n	8002228 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002200:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <xQueueGenericSend+0x1f8>)
 8002202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	e00a      	b.n	8002228 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002218:	4b39      	ldr	r3, [pc, #228]	; (8002300 <xQueueGenericSend+0x1f8>)
 800221a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002228:	f002 fa00 	bl	800462c <vPortExitCritical>
				return pdPASS;
 800222c:	2301      	movs	r3, #1
 800222e:	e063      	b.n	80022f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002236:	f002 f9f9 	bl	800462c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800223a:	2300      	movs	r3, #0
 800223c:	e05c      	b.n	80022f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800223e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4618      	mov	r0, r3
 800224a:	f001 fa77 	bl	800373c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800224e:	2301      	movs	r3, #1
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002252:	f002 f9eb 	bl	800462c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002256:	f000 ffe9 	bl	800322c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800225a:	f002 f9b7 	bl	80045cc <vPortEnterCritical>
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002264:	b25b      	sxtb	r3, r3
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d103      	bne.n	8002274 <xQueueGenericSend+0x16c>
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800227a:	b25b      	sxtb	r3, r3
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d103      	bne.n	800228a <xQueueGenericSend+0x182>
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800228a:	f002 f9cf 	bl	800462c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800228e:	1d3a      	adds	r2, r7, #4
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4611      	mov	r1, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f001 fa66 	bl	8003768 <xTaskCheckForTimeOut>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d124      	bne.n	80022ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80022a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022a4:	f000 fcf2 	bl	8002c8c <prvIsQueueFull>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d018      	beq.n	80022e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	3310      	adds	r3, #16
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 f98c 	bl	80035d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80022bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022be:	f000 fc7d 	bl	8002bbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80022c2:	f000 ffc1 	bl	8003248 <xTaskResumeAll>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f47f af7c 	bne.w	80021c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80022ce:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <xQueueGenericSend+0x1f8>)
 80022d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f3bf 8f4f 	dsb	sy
 80022da:	f3bf 8f6f 	isb	sy
 80022de:	e772      	b.n	80021c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80022e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022e2:	f000 fc6b 	bl	8002bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022e6:	f000 ffaf 	bl	8003248 <xTaskResumeAll>
 80022ea:	e76c      	b.n	80021c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80022ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022ee:	f000 fc65 	bl	8002bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022f2:	f000 ffa9 	bl	8003248 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80022f6:	2300      	movs	r3, #0
		}
	}
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3738      	adds	r7, #56	; 0x38
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	e000ed04 	.word	0xe000ed04

08002304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08e      	sub	sp, #56	; 0x38
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10a      	bne.n	8002332 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002320:	f383 8811 	msr	BASEPRI, r3
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800232e:	bf00      	nop
 8002330:	e7fe      	b.n	8002330 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <xQueueGenericSendFromISR+0x3c>
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <xQueueGenericSendFromISR+0x40>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <xQueueGenericSendFromISR+0x42>
 8002344:	2300      	movs	r3, #0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	623b      	str	r3, [r7, #32]
}
 800235c:	bf00      	nop
 800235e:	e7fe      	b.n	800235e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d103      	bne.n	800236e <xQueueGenericSendFromISR+0x6a>
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <xQueueGenericSendFromISR+0x6e>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <xQueueGenericSendFromISR+0x70>
 8002372:	2300      	movs	r3, #0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	61fb      	str	r3, [r7, #28]
}
 800238a:	bf00      	nop
 800238c:	e7fe      	b.n	800238c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800238e:	f002 f9df 	bl	8004750 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002392:	f3ef 8211 	mrs	r2, BASEPRI
 8002396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239a:	f383 8811 	msr	BASEPRI, r3
 800239e:	f3bf 8f6f 	isb	sy
 80023a2:	f3bf 8f4f 	dsb	sy
 80023a6:	61ba      	str	r2, [r7, #24]
 80023a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80023aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d302      	bcc.n	80023c0 <xQueueGenericSendFromISR+0xbc>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d12c      	bne.n	800241a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023d0:	f000 fb64 	bl	8002a9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80023d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d112      	bne.n	8002404 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d016      	beq.n	8002414 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	3324      	adds	r3, #36	; 0x24
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 f942 	bl	8003674 <xTaskRemoveFromEventList>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00e      	beq.n	8002414 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00b      	beq.n	8002414 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	e007      	b.n	8002414 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002404:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002408:	3301      	adds	r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	b25a      	sxtb	r2, r3
 800240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002414:	2301      	movs	r3, #1
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002418:	e001      	b.n	800241e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800241a:	2300      	movs	r3, #0
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002428:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800242a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800242c:	4618      	mov	r0, r3
 800242e:	3738      	adds	r7, #56	; 0x38
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08e      	sub	sp, #56	; 0x38
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244c:	f383 8811 	msr	BASEPRI, r3
 8002450:	f3bf 8f6f 	isb	sy
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	623b      	str	r3, [r7, #32]
}
 800245a:	bf00      	nop
 800245c:	e7fe      	b.n	800245c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <xQueueGiveFromISR+0x48>
	__asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	61fb      	str	r3, [r7, #28]
}
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <xQueueGiveFromISR+0x58>
 8002484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <xQueueGiveFromISR+0x5c>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <xQueueGiveFromISR+0x5e>
 8002490:	2300      	movs	r3, #0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <xQueueGiveFromISR+0x78>
	__asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	61bb      	str	r3, [r7, #24]
}
 80024a8:	bf00      	nop
 80024aa:	e7fe      	b.n	80024aa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024ac:	f002 f950 	bl	8004750 <vPortValidateInterruptPriority>
	__asm volatile
 80024b0:	f3ef 8211 	mrs	r2, BASEPRI
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	617a      	str	r2, [r7, #20]
 80024c6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80024c8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024d8:	429a      	cmp	r2, r3
 80024da:	d22b      	bcs.n	8002534 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80024ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d112      	bne.n	800251e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d016      	beq.n	800252e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002502:	3324      	adds	r3, #36	; 0x24
 8002504:	4618      	mov	r0, r3
 8002506:	f001 f8b5 	bl	8003674 <xTaskRemoveFromEventList>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00e      	beq.n	800252e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e007      	b.n	800252e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800251e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002522:	3301      	adds	r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	b25a      	sxtb	r2, r3
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800252e:	2301      	movs	r3, #1
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
 8002532:	e001      	b.n	8002538 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002534:	2300      	movs	r3, #0
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f383 8811 	msr	BASEPRI, r3
}
 8002542:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002546:	4618      	mov	r0, r3
 8002548:	3738      	adds	r7, #56	; 0x38
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800255c:	2300      	movs	r3, #0
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10a      	bne.n	8002580 <xQueueReceive+0x30>
	__asm volatile
 800256a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256e:	f383 8811 	msr	BASEPRI, r3
 8002572:	f3bf 8f6f 	isb	sy
 8002576:	f3bf 8f4f 	dsb	sy
 800257a:	623b      	str	r3, [r7, #32]
}
 800257c:	bf00      	nop
 800257e:	e7fe      	b.n	800257e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <xQueueReceive+0x3e>
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <xQueueReceive+0x42>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <xQueueReceive+0x44>
 8002592:	2300      	movs	r3, #0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <xQueueReceive+0x5e>
	__asm volatile
 8002598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	61fb      	str	r3, [r7, #28]
}
 80025aa:	bf00      	nop
 80025ac:	e7fe      	b.n	80025ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025ae:	f001 fa23 	bl	80039f8 <xTaskGetSchedulerState>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <xQueueReceive+0x6e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <xQueueReceive+0x72>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <xQueueReceive+0x74>
 80025c2:	2300      	movs	r3, #0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <xQueueReceive+0x8e>
	__asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	61bb      	str	r3, [r7, #24]
}
 80025da:	bf00      	nop
 80025dc:	e7fe      	b.n	80025dc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80025de:	f001 fff5 	bl	80045cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01f      	beq.n	800262e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025f2:	f000 fabd 	bl	8002b70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	1e5a      	subs	r2, r3, #1
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00f      	beq.n	8002626 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	3310      	adds	r3, #16
 800260a:	4618      	mov	r0, r3
 800260c:	f001 f832 	bl	8003674 <xTaskRemoveFromEventList>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <xQueueReceive+0x1bc>)
 8002618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002626:	f002 f801 	bl	800462c <vPortExitCritical>
				return pdPASS;
 800262a:	2301      	movs	r3, #1
 800262c:	e069      	b.n	8002702 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d103      	bne.n	800263c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002634:	f001 fffa 	bl	800462c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002638:	2300      	movs	r3, #0
 800263a:	e062      	b.n	8002702 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002642:	f107 0310 	add.w	r3, r7, #16
 8002646:	4618      	mov	r0, r3
 8002648:	f001 f878 	bl	800373c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800264c:	2301      	movs	r3, #1
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002650:	f001 ffec 	bl	800462c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002654:	f000 fdea 	bl	800322c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002658:	f001 ffb8 	bl	80045cc <vPortEnterCritical>
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002662:	b25b      	sxtb	r3, r3
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d103      	bne.n	8002672 <xQueueReceive+0x122>
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002678:	b25b      	sxtb	r3, r3
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267e:	d103      	bne.n	8002688 <xQueueReceive+0x138>
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002688:	f001 ffd0 	bl	800462c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800268c:	1d3a      	adds	r2, r7, #4
 800268e:	f107 0310 	add.w	r3, r7, #16
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f001 f867 	bl	8003768 <xTaskCheckForTimeOut>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d123      	bne.n	80026e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026a2:	f000 fadd 	bl	8002c60 <prvIsQueueEmpty>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d017      	beq.n	80026dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	3324      	adds	r3, #36	; 0x24
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 ff8d 	bl	80035d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026bc:	f000 fa7e 	bl	8002bbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026c0:	f000 fdc2 	bl	8003248 <xTaskResumeAll>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d189      	bne.n	80025de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <xQueueReceive+0x1bc>)
 80026cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	e780      	b.n	80025de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80026dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026de:	f000 fa6d 	bl	8002bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026e2:	f000 fdb1 	bl	8003248 <xTaskResumeAll>
 80026e6:	e77a      	b.n	80025de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80026e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ea:	f000 fa67 	bl	8002bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026ee:	f000 fdab 	bl	8003248 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026f4:	f000 fab4 	bl	8002c60 <prvIsQueueEmpty>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f43f af6f 	beq.w	80025de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002700:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002702:	4618      	mov	r0, r3
 8002704:	3730      	adds	r7, #48	; 0x30
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	e000ed04 	.word	0xe000ed04

08002710 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08e      	sub	sp, #56	; 0x38
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800271a:	2300      	movs	r3, #0
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002722:	2300      	movs	r3, #0
 8002724:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10a      	bne.n	8002742 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	623b      	str	r3, [r7, #32]
}
 800273e:	bf00      	nop
 8002740:	e7fe      	b.n	8002740 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	61fb      	str	r3, [r7, #28]
}
 800275c:	bf00      	nop
 800275e:	e7fe      	b.n	800275e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002760:	f001 f94a 	bl	80039f8 <xTaskGetSchedulerState>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d102      	bne.n	8002770 <xQueueSemaphoreTake+0x60>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <xQueueSemaphoreTake+0x64>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <xQueueSemaphoreTake+0x66>
 8002774:	2300      	movs	r3, #0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	61bb      	str	r3, [r7, #24]
}
 800278c:	bf00      	nop
 800278e:	e7fe      	b.n	800278e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002790:	f001 ff1c 	bl	80045cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	d024      	beq.n	80027ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	1e5a      	subs	r2, r3, #1
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d104      	bne.n	80027ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80027b0:	f001 faa2 	bl	8003cf8 <pvTaskIncrementMutexHeldCount>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00f      	beq.n	80027e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	3310      	adds	r3, #16
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 ff54 	bl	8003674 <xTaskRemoveFromEventList>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027d2:	4b54      	ldr	r3, [pc, #336]	; (8002924 <xQueueSemaphoreTake+0x214>)
 80027d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027e2:	f001 ff23 	bl	800462c <vPortExitCritical>
				return pdPASS;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e097      	b.n	800291a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80027f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	617b      	str	r3, [r7, #20]
}
 8002808:	bf00      	nop
 800280a:	e7fe      	b.n	800280a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800280c:	f001 ff0e 	bl	800462c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002810:	2300      	movs	r3, #0
 8002812:	e082      	b.n	800291a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800281a:	f107 030c 	add.w	r3, r7, #12
 800281e:	4618      	mov	r0, r3
 8002820:	f000 ff8c 	bl	800373c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002824:	2301      	movs	r3, #1
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002828:	f001 ff00 	bl	800462c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800282c:	f000 fcfe 	bl	800322c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002830:	f001 fecc 	bl	80045cc <vPortEnterCritical>
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800283a:	b25b      	sxtb	r3, r3
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d103      	bne.n	800284a <xQueueSemaphoreTake+0x13a>
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002850:	b25b      	sxtb	r3, r3
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d103      	bne.n	8002860 <xQueueSemaphoreTake+0x150>
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002860:	f001 fee4 	bl	800462c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002864:	463a      	mov	r2, r7
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f000 ff7b 	bl	8003768 <xTaskCheckForTimeOut>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d132      	bne.n	80028de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800287a:	f000 f9f1 	bl	8002c60 <prvIsQueueEmpty>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d026      	beq.n	80028d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800288c:	f001 fe9e 	bl	80045cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4618      	mov	r0, r3
 8002896:	f001 f8cd 	bl	8003a34 <xTaskPriorityInherit>
 800289a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800289c:	f001 fec6 	bl	800462c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	3324      	adds	r3, #36	; 0x24
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fe93 	bl	80035d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028b0:	f000 f984 	bl	8002bbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028b4:	f000 fcc8 	bl	8003248 <xTaskResumeAll>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f47f af68 	bne.w	8002790 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <xQueueSemaphoreTake+0x214>)
 80028c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	e75e      	b.n	8002790 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80028d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028d4:	f000 f972 	bl	8002bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028d8:	f000 fcb6 	bl	8003248 <xTaskResumeAll>
 80028dc:	e758      	b.n	8002790 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80028de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028e0:	f000 f96c 	bl	8002bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028e4:	f000 fcb0 	bl	8003248 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028ea:	f000 f9b9 	bl	8002c60 <prvIsQueueEmpty>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f43f af4d 	beq.w	8002790 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80028fc:	f001 fe66 	bl	80045cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002902:	f000 f8b4 	bl	8002a6e <prvGetDisinheritPriorityAfterTimeout>
 8002906:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290e:	4618      	mov	r0, r3
 8002910:	f001 f96c 	bl	8003bec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002914:	f001 fe8a 	bl	800462c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002918:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800291a:	4618      	mov	r0, r3
 800291c:	3738      	adds	r7, #56	; 0x38
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08e      	sub	sp, #56	; 0x38
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10a      	bne.n	8002954 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	623b      	str	r3, [r7, #32]
}
 8002950:	bf00      	nop
 8002952:	e7fe      	b.n	8002952 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d103      	bne.n	8002962 <xQueueReceiveFromISR+0x3a>
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <xQueueReceiveFromISR+0x3e>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <xQueueReceiveFromISR+0x40>
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	61fb      	str	r3, [r7, #28]
}
 800297e:	bf00      	nop
 8002980:	e7fe      	b.n	8002980 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002982:	f001 fee5 	bl	8004750 <vPortValidateInterruptPriority>
	__asm volatile
 8002986:	f3ef 8211 	mrs	r2, BASEPRI
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	61ba      	str	r2, [r7, #24]
 800299c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800299e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d02f      	beq.n	8002a0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029bc:	f000 f8d8 	bl	8002b70 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	1e5a      	subs	r2, r3, #1
 80029c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80029c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d112      	bne.n	80029f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d016      	beq.n	8002a08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	3310      	adds	r3, #16
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fe48 	bl	8003674 <xTaskRemoveFromEventList>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00e      	beq.n	8002a08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00b      	beq.n	8002a08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e007      	b.n	8002a08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80029f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029fc:	3301      	adds	r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	b25a      	sxtb	r2, r3
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0c:	e001      	b.n	8002a12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f383 8811 	msr	BASEPRI, r3
}
 8002a1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3738      	adds	r7, #56	; 0x38
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <vQueueDelete+0x28>
	__asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	60bb      	str	r3, [r7, #8]
}
 8002a4c:	bf00      	nop
 8002a4e:	e7fe      	b.n	8002a4e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f95b 	bl	8002d0c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f001 ff77 	bl	8004954 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002a6e:	b480      	push	{r7}
 8002a70:	b085      	sub	sp, #20
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e001      	b.n	8002a90 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002a90:	68fb      	ldr	r3, [r7, #12]
	}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d14d      	bne.n	8002b5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f001 f822 	bl	8003b10 <xTaskPriorityDisinherit>
 8002acc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	e043      	b.n	8002b5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d119      	bne.n	8002b10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6898      	ldr	r0, [r3, #8]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	f002 f86c 	bl	8004bc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	441a      	add	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d32b      	bcc.n	8002b5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	e026      	b.n	8002b5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68d8      	ldr	r0, [r3, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	f002 f852 	bl	8004bc4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	425b      	negs	r3, r3
 8002b2a:	441a      	add	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d207      	bcs.n	8002b4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	425b      	negs	r3, r3
 8002b46:	441a      	add	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d105      	bne.n	8002b5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b66:	697b      	ldr	r3, [r7, #20]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d018      	beq.n	8002bb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	441a      	add	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d303      	bcc.n	8002ba4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68d9      	ldr	r1, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	461a      	mov	r2, r3
 8002bae:	6838      	ldr	r0, [r7, #0]
 8002bb0:	f002 f808 	bl	8004bc4 <memcpy>
	}
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bc4:	f001 fd02 	bl	80045cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bd0:	e011      	b.n	8002bf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d012      	beq.n	8002c00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3324      	adds	r3, #36	; 0x24
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fd48 	bl	8003674 <xTaskRemoveFromEventList>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002bea:	f000 fe1f 	bl	800382c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	dce9      	bgt.n	8002bd2 <prvUnlockQueue+0x16>
 8002bfe:	e000      	b.n	8002c02 <prvUnlockQueue+0x46>
					break;
 8002c00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	22ff      	movs	r2, #255	; 0xff
 8002c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c0a:	f001 fd0f 	bl	800462c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c0e:	f001 fcdd 	bl	80045cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c1a:	e011      	b.n	8002c40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3310      	adds	r3, #16
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fd23 	bl	8003674 <xTaskRemoveFromEventList>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c34:	f000 fdfa 	bl	800382c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c38:	7bbb      	ldrb	r3, [r7, #14]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	dce9      	bgt.n	8002c1c <prvUnlockQueue+0x60>
 8002c48:	e000      	b.n	8002c4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	22ff      	movs	r2, #255	; 0xff
 8002c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c54:	f001 fcea 	bl	800462c <vPortExitCritical>
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c68:	f001 fcb0 	bl	80045cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e001      	b.n	8002c7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c7e:	f001 fcd5 	bl	800462c <vPortExitCritical>

	return xReturn;
 8002c82:	68fb      	ldr	r3, [r7, #12]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c94:	f001 fc9a 	bl	80045cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d102      	bne.n	8002caa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e001      	b.n	8002cae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cae:	f001 fcbd 	bl	800462c <vPortExitCritical>

	return xReturn;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e014      	b.n	8002cf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ccc:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <vQueueAddToRegistry+0x4c>)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10b      	bne.n	8002cf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cd8:	490b      	ldr	r1, [pc, #44]	; (8002d08 <vQueueAddToRegistry+0x4c>)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <vQueueAddToRegistry+0x4c>)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002cee:	e006      	b.n	8002cfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b07      	cmp	r3, #7
 8002cfa:	d9e7      	bls.n	8002ccc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	20000820 	.word	0x20000820

08002d0c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e016      	b.n	8002d48 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002d1a:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <vQueueUnregisterQueue+0x50>)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d10b      	bne.n	8002d42 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002d2a:	4a0c      	ldr	r2, [pc, #48]	; (8002d5c <vQueueUnregisterQueue+0x50>)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2100      	movs	r1, #0
 8002d30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002d34:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <vQueueUnregisterQueue+0x50>)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	605a      	str	r2, [r3, #4]
				break;
 8002d40:	e006      	b.n	8002d50 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	3301      	adds	r3, #1
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b07      	cmp	r3, #7
 8002d4c:	d9e5      	bls.n	8002d1a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002d4e:	bf00      	nop
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000820 	.word	0x20000820

08002d60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d70:	f001 fc2c 	bl	80045cc <vPortEnterCritical>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d7a:	b25b      	sxtb	r3, r3
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d103      	bne.n	8002d8a <vQueueWaitForMessageRestricted+0x2a>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d90:	b25b      	sxtb	r3, r3
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d103      	bne.n	8002da0 <vQueueWaitForMessageRestricted+0x40>
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002da0:	f001 fc44 	bl	800462c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3324      	adds	r3, #36	; 0x24
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fc31 	bl	800361c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002dba:	6978      	ldr	r0, [r7, #20]
 8002dbc:	f7ff fefe 	bl	8002bbc <prvUnlockQueue>
	}
 8002dc0:	bf00      	nop
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08e      	sub	sp, #56	; 0x38
 8002dcc:	af04      	add	r7, sp, #16
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	623b      	str	r3, [r7, #32]
}
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xTaskCreateStatic+0x46>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	61fb      	str	r3, [r7, #28]
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e0e:	235c      	movs	r3, #92	; 0x5c
 8002e10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b5c      	cmp	r3, #92	; 0x5c
 8002e16:	d00a      	beq.n	8002e2e <xTaskCreateStatic+0x66>
	__asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	61bb      	str	r3, [r7, #24]
}
 8002e2a:	bf00      	nop
 8002e2c:	e7fe      	b.n	8002e2c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01e      	beq.n	8002e72 <xTaskCreateStatic+0xaa>
 8002e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01b      	beq.n	8002e72 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9303      	str	r3, [sp, #12]
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	9302      	str	r3, [sp, #8]
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	9301      	str	r3, [sp, #4]
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f850 	bl	8002f0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e6c:	f000 f8d4 	bl	8003018 <prvAddNewTaskToReadyList>
 8002e70:	e001      	b.n	8002e76 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e76:	697b      	ldr	r3, [r7, #20]
	}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3728      	adds	r7, #40	; 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08c      	sub	sp, #48	; 0x30
 8002e84:	af04      	add	r7, sp, #16
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 fc99 	bl	80047cc <pvPortMalloc>
 8002e9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00e      	beq.n	8002ec0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002ea2:	205c      	movs	r0, #92	; 0x5c
 8002ea4:	f001 fc92 	bl	80047cc <pvPortMalloc>
 8002ea8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8002eb6:	e005      	b.n	8002ec4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002eb8:	6978      	ldr	r0, [r7, #20]
 8002eba:	f001 fd4b 	bl	8004954 <vPortFree>
 8002ebe:	e001      	b.n	8002ec4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d017      	beq.n	8002efa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9303      	str	r3, [sp, #12]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	9302      	str	r3, [sp, #8]
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f80e 	bl	8002f0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002eee:	69f8      	ldr	r0, [r7, #28]
 8002ef0:	f000 f892 	bl	8003018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	e002      	b.n	8002f00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f00:	69bb      	ldr	r3, [r7, #24]
	}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b088      	sub	sp, #32
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	461a      	mov	r2, r3
 8002f22:	21a5      	movs	r1, #165	; 0xa5
 8002f24:	f001 fe5c 	bl	8004be0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f32:	3b01      	subs	r3, #1
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f023 0307 	bic.w	r3, r3, #7
 8002f40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	617b      	str	r3, [r7, #20]
}
 8002f5e:	bf00      	nop
 8002f60:	e7fe      	b.n	8002f60 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	e012      	b.n	8002f8e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	7819      	ldrb	r1, [r3, #0]
 8002f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	4413      	add	r3, r2
 8002f76:	3334      	adds	r3, #52	; 0x34
 8002f78:	460a      	mov	r2, r1
 8002f7a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d006      	beq.n	8002f96 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	2b0f      	cmp	r3, #15
 8002f92:	d9e9      	bls.n	8002f68 <prvInitialiseNewTask+0x5e>
 8002f94:	e000      	b.n	8002f98 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002f96:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	2b37      	cmp	r3, #55	; 0x37
 8002fa4:	d901      	bls.n	8002faa <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fa6:	2337      	movs	r3, #55	; 0x37
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fb4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	2200      	movs	r2, #0
 8002fba:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe fe66 	bl	8001c92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	3318      	adds	r3, #24
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe fe61 	bl	8001c92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	2200      	movs	r2, #0
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	68f9      	ldr	r1, [r7, #12]
 8002ff8:	69b8      	ldr	r0, [r7, #24]
 8002ffa:	f001 f9f7 	bl	80043ec <pxPortInitialiseStack>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003010:	bf00      	nop
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003020:	f001 fad4 	bl	80045cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <prvAddNewTaskToReadyList+0xc4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <prvAddNewTaskToReadyList+0xc4>)
 800302c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800302e:	4b2c      	ldr	r3, [pc, #176]	; (80030e0 <prvAddNewTaskToReadyList+0xc8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003036:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <prvAddNewTaskToReadyList+0xc8>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <prvAddNewTaskToReadyList+0xc4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d110      	bne.n	8003066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003044:	f000 fc16 	bl	8003874 <prvInitialiseTaskLists>
 8003048:	e00d      	b.n	8003066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <prvAddNewTaskToReadyList+0xcc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003052:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <prvAddNewTaskToReadyList+0xc8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	429a      	cmp	r2, r3
 800305e:	d802      	bhi.n	8003066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003060:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <prvAddNewTaskToReadyList+0xc8>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <prvAddNewTaskToReadyList+0xd0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3301      	adds	r3, #1
 800306c:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <prvAddNewTaskToReadyList+0xd0>)
 800306e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <prvAddNewTaskToReadyList+0xd0>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <prvAddNewTaskToReadyList+0xd4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d903      	bls.n	800308c <prvAddNewTaskToReadyList+0x74>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	4a18      	ldr	r2, [pc, #96]	; (80030ec <prvAddNewTaskToReadyList+0xd4>)
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <prvAddNewTaskToReadyList+0xd8>)
 800309a:	441a      	add	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f7fe fe01 	bl	8001caa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030a8:	f001 fac0 	bl	800462c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030ac:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <prvAddNewTaskToReadyList+0xcc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00e      	beq.n	80030d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <prvAddNewTaskToReadyList+0xc8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	429a      	cmp	r2, r3
 80030c0:	d207      	bcs.n	80030d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80030c2:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <prvAddNewTaskToReadyList+0xdc>)
 80030c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000d34 	.word	0x20000d34
 80030e0:	20000860 	.word	0x20000860
 80030e4:	20000d40 	.word	0x20000d40
 80030e8:	20000d50 	.word	0x20000d50
 80030ec:	20000d3c 	.word	0x20000d3c
 80030f0:	20000864 	.word	0x20000864
 80030f4:	e000ed04 	.word	0xe000ed04

080030f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d017      	beq.n	800313a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <vTaskDelay+0x60>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <vTaskDelay+0x30>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	60bb      	str	r3, [r7, #8]
}
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003128:	f000 f880 	bl	800322c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800312c:	2100      	movs	r1, #0
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fdf6 	bl	8003d20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003134:	f000 f888 	bl	8003248 <xTaskResumeAll>
 8003138:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d107      	bne.n	8003150 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <vTaskDelay+0x64>)
 8003142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000d5c 	.word	0x20000d5c
 800315c:	e000ed04 	.word	0xe000ed04

08003160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800316a:	2300      	movs	r3, #0
 800316c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800316e:	463a      	mov	r2, r7
 8003170:	1d39      	adds	r1, r7, #4
 8003172:	f107 0308 	add.w	r3, r7, #8
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fd3a 	bl	8001bf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800317c:	6839      	ldr	r1, [r7, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	9202      	str	r2, [sp, #8]
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	2300      	movs	r3, #0
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2300      	movs	r3, #0
 800318c:	460a      	mov	r2, r1
 800318e:	4921      	ldr	r1, [pc, #132]	; (8003214 <vTaskStartScheduler+0xb4>)
 8003190:	4821      	ldr	r0, [pc, #132]	; (8003218 <vTaskStartScheduler+0xb8>)
 8003192:	f7ff fe19 	bl	8002dc8 <xTaskCreateStatic>
 8003196:	4603      	mov	r3, r0
 8003198:	4a20      	ldr	r2, [pc, #128]	; (800321c <vTaskStartScheduler+0xbc>)
 800319a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800319c:	4b1f      	ldr	r3, [pc, #124]	; (800321c <vTaskStartScheduler+0xbc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031a4:	2301      	movs	r3, #1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e001      	b.n	80031ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d102      	bne.n	80031ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80031b4:	f000 fe08 	bl	8003dc8 <xTimerCreateTimerTask>
 80031b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d116      	bne.n	80031ee <vTaskStartScheduler+0x8e>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	613b      	str	r3, [r7, #16]
}
 80031d2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031d4:	4b12      	ldr	r3, [pc, #72]	; (8003220 <vTaskStartScheduler+0xc0>)
 80031d6:	f04f 32ff 	mov.w	r2, #4294967295
 80031da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <vTaskStartScheduler+0xc4>)
 80031de:	2201      	movs	r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <vTaskStartScheduler+0xc8>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031e8:	f001 f97e 	bl	80044e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031ec:	e00e      	b.n	800320c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d10a      	bne.n	800320c <vTaskStartScheduler+0xac>
	__asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	60fb      	str	r3, [r7, #12]
}
 8003208:	bf00      	nop
 800320a:	e7fe      	b.n	800320a <vTaskStartScheduler+0xaa>
}
 800320c:	bf00      	nop
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	08004c64 	.word	0x08004c64
 8003218:	08003845 	.word	0x08003845
 800321c:	20000d58 	.word	0x20000d58
 8003220:	20000d54 	.word	0x20000d54
 8003224:	20000d40 	.word	0x20000d40
 8003228:	20000d38 	.word	0x20000d38

0800322c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <vTaskSuspendAll+0x18>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	4a03      	ldr	r2, [pc, #12]	; (8003244 <vTaskSuspendAll+0x18>)
 8003238:	6013      	str	r3, [r2, #0]
}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000d5c 	.word	0x20000d5c

08003248 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003256:	4b42      	ldr	r3, [pc, #264]	; (8003360 <xTaskResumeAll+0x118>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <xTaskResumeAll+0x2c>
	__asm volatile
 800325e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	603b      	str	r3, [r7, #0]
}
 8003270:	bf00      	nop
 8003272:	e7fe      	b.n	8003272 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003274:	f001 f9aa 	bl	80045cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003278:	4b39      	ldr	r3, [pc, #228]	; (8003360 <xTaskResumeAll+0x118>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3b01      	subs	r3, #1
 800327e:	4a38      	ldr	r2, [pc, #224]	; (8003360 <xTaskResumeAll+0x118>)
 8003280:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003282:	4b37      	ldr	r3, [pc, #220]	; (8003360 <xTaskResumeAll+0x118>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d162      	bne.n	8003350 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800328a:	4b36      	ldr	r3, [pc, #216]	; (8003364 <xTaskResumeAll+0x11c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d05e      	beq.n	8003350 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003292:	e02f      	b.n	80032f4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003294:	4b34      	ldr	r3, [pc, #208]	; (8003368 <xTaskResumeAll+0x120>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3318      	adds	r3, #24
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe fd5d 	bl	8001d60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3304      	adds	r3, #4
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fd58 	bl	8001d60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	4b2d      	ldr	r3, [pc, #180]	; (800336c <xTaskResumeAll+0x124>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d903      	bls.n	80032c4 <xTaskResumeAll+0x7c>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	4a2a      	ldr	r2, [pc, #168]	; (800336c <xTaskResumeAll+0x124>)
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <xTaskResumeAll+0x128>)
 80032d2:	441a      	add	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3304      	adds	r3, #4
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f7fe fce5 	bl	8001caa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	4b23      	ldr	r3, [pc, #140]	; (8003374 <xTaskResumeAll+0x12c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d302      	bcc.n	80032f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80032ee:	4b22      	ldr	r3, [pc, #136]	; (8003378 <xTaskResumeAll+0x130>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032f4:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <xTaskResumeAll+0x120>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1cb      	bne.n	8003294 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003302:	f000 fb55 	bl	80039b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <xTaskResumeAll+0x134>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d010      	beq.n	8003334 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003312:	f000 f845 	bl	80033a0 <xTaskIncrementTick>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800331c:	4b16      	ldr	r3, [pc, #88]	; (8003378 <xTaskResumeAll+0x130>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3b01      	subs	r3, #1
 8003326:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f1      	bne.n	8003312 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <xTaskResumeAll+0x134>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003334:	4b10      	ldr	r3, [pc, #64]	; (8003378 <xTaskResumeAll+0x130>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800333c:	2301      	movs	r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <xTaskResumeAll+0x138>)
 8003342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003350:	f001 f96c 	bl	800462c <vPortExitCritical>

	return xAlreadyYielded;
 8003354:	68bb      	ldr	r3, [r7, #8]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000d5c 	.word	0x20000d5c
 8003364:	20000d34 	.word	0x20000d34
 8003368:	20000cf4 	.word	0x20000cf4
 800336c:	20000d3c 	.word	0x20000d3c
 8003370:	20000864 	.word	0x20000864
 8003374:	20000860 	.word	0x20000860
 8003378:	20000d48 	.word	0x20000d48
 800337c:	20000d44 	.word	0x20000d44
 8003380:	e000ed04 	.word	0xe000ed04

08003384 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800338a:	4b04      	ldr	r3, [pc, #16]	; (800339c <xTaskGetTickCount+0x18>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003390:	687b      	ldr	r3, [r7, #4]
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	20000d38 	.word	0x20000d38

080033a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033aa:	4b51      	ldr	r3, [pc, #324]	; (80034f0 <xTaskIncrementTick+0x150>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f040 808e 	bne.w	80034d0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033b4:	4b4f      	ldr	r3, [pc, #316]	; (80034f4 <xTaskIncrementTick+0x154>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033bc:	4a4d      	ldr	r2, [pc, #308]	; (80034f4 <xTaskIncrementTick+0x154>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d120      	bne.n	800340a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033c8:	4b4b      	ldr	r3, [pc, #300]	; (80034f8 <xTaskIncrementTick+0x158>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	603b      	str	r3, [r7, #0]
}
 80033e4:	bf00      	nop
 80033e6:	e7fe      	b.n	80033e6 <xTaskIncrementTick+0x46>
 80033e8:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <xTaskIncrementTick+0x158>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	4b43      	ldr	r3, [pc, #268]	; (80034fc <xTaskIncrementTick+0x15c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a41      	ldr	r2, [pc, #260]	; (80034f8 <xTaskIncrementTick+0x158>)
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4a41      	ldr	r2, [pc, #260]	; (80034fc <xTaskIncrementTick+0x15c>)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	4b40      	ldr	r3, [pc, #256]	; (8003500 <xTaskIncrementTick+0x160>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	4a3f      	ldr	r2, [pc, #252]	; (8003500 <xTaskIncrementTick+0x160>)
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	f000 fad3 	bl	80039b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800340a:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <xTaskIncrementTick+0x164>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	429a      	cmp	r2, r3
 8003412:	d34e      	bcc.n	80034b2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003414:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <xTaskIncrementTick+0x158>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <xTaskIncrementTick+0x82>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <xTaskIncrementTick+0x84>
 8003422:	2300      	movs	r3, #0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d004      	beq.n	8003432 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003428:	4b36      	ldr	r3, [pc, #216]	; (8003504 <xTaskIncrementTick+0x164>)
 800342a:	f04f 32ff 	mov.w	r2, #4294967295
 800342e:	601a      	str	r2, [r3, #0]
					break;
 8003430:	e03f      	b.n	80034b2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003432:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <xTaskIncrementTick+0x158>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	429a      	cmp	r2, r3
 8003448:	d203      	bcs.n	8003452 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800344a:	4a2e      	ldr	r2, [pc, #184]	; (8003504 <xTaskIncrementTick+0x164>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6013      	str	r3, [r2, #0]
						break;
 8003450:	e02f      	b.n	80034b2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3304      	adds	r3, #4
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fc82 	bl	8001d60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	2b00      	cmp	r3, #0
 8003462:	d004      	beq.n	800346e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	3318      	adds	r3, #24
 8003468:	4618      	mov	r0, r3
 800346a:	f7fe fc79 	bl	8001d60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003472:	4b25      	ldr	r3, [pc, #148]	; (8003508 <xTaskIncrementTick+0x168>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d903      	bls.n	8003482 <xTaskIncrementTick+0xe2>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	4a22      	ldr	r2, [pc, #136]	; (8003508 <xTaskIncrementTick+0x168>)
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4a1f      	ldr	r2, [pc, #124]	; (800350c <xTaskIncrementTick+0x16c>)
 8003490:	441a      	add	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	3304      	adds	r3, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f7fe fc06 	bl	8001caa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a2:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <xTaskIncrementTick+0x170>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3b3      	bcc.n	8003414 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80034ac:	2301      	movs	r3, #1
 80034ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034b0:	e7b0      	b.n	8003414 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <xTaskIncrementTick+0x170>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b8:	4914      	ldr	r1, [pc, #80]	; (800350c <xTaskIncrementTick+0x16c>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d907      	bls.n	80034da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80034ca:	2301      	movs	r3, #1
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	e004      	b.n	80034da <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <xTaskIncrementTick+0x174>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3301      	adds	r3, #1
 80034d6:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <xTaskIncrementTick+0x174>)
 80034d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80034da:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <xTaskIncrementTick+0x178>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80034e2:	2301      	movs	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80034e6:	697b      	ldr	r3, [r7, #20]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000d5c 	.word	0x20000d5c
 80034f4:	20000d38 	.word	0x20000d38
 80034f8:	20000cec 	.word	0x20000cec
 80034fc:	20000cf0 	.word	0x20000cf0
 8003500:	20000d4c 	.word	0x20000d4c
 8003504:	20000d54 	.word	0x20000d54
 8003508:	20000d3c 	.word	0x20000d3c
 800350c:	20000864 	.word	0x20000864
 8003510:	20000860 	.word	0x20000860
 8003514:	20000d44 	.word	0x20000d44
 8003518:	20000d48 	.word	0x20000d48

0800351c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003522:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <vTaskSwitchContext+0xa4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <vTaskSwitchContext+0xa8>)
 800352c:	2201      	movs	r2, #1
 800352e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003530:	e041      	b.n	80035b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <vTaskSwitchContext+0xa8>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003538:	4b23      	ldr	r3, [pc, #140]	; (80035c8 <vTaskSwitchContext+0xac>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e010      	b.n	8003562 <vTaskSwitchContext+0x46>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <vTaskSwitchContext+0x40>
	__asm volatile
 8003546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	607b      	str	r3, [r7, #4]
}
 8003558:	bf00      	nop
 800355a:	e7fe      	b.n	800355a <vTaskSwitchContext+0x3e>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3b01      	subs	r3, #1
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	491a      	ldr	r1, [pc, #104]	; (80035cc <vTaskSwitchContext+0xb0>)
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0e4      	beq.n	8003540 <vTaskSwitchContext+0x24>
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4a12      	ldr	r2, [pc, #72]	; (80035cc <vTaskSwitchContext+0xb0>)
 8003582:	4413      	add	r3, r2
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3308      	adds	r3, #8
 8003598:	429a      	cmp	r2, r3
 800359a:	d104      	bne.n	80035a6 <vTaskSwitchContext+0x8a>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a08      	ldr	r2, [pc, #32]	; (80035d0 <vTaskSwitchContext+0xb4>)
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4a05      	ldr	r2, [pc, #20]	; (80035c8 <vTaskSwitchContext+0xac>)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6013      	str	r3, [r2, #0]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	20000d5c 	.word	0x20000d5c
 80035c4:	20000d48 	.word	0x20000d48
 80035c8:	20000d3c 	.word	0x20000d3c
 80035cc:	20000864 	.word	0x20000864
 80035d0:	20000860 	.word	0x20000860

080035d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	60fb      	str	r3, [r7, #12]
}
 80035f6:	bf00      	nop
 80035f8:	e7fe      	b.n	80035f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <vTaskPlaceOnEventList+0x44>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3318      	adds	r3, #24
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fe fb74 	bl	8001cf0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003608:	2101      	movs	r1, #1
 800360a:	6838      	ldr	r0, [r7, #0]
 800360c:	f000 fb88 	bl	8003d20 <prvAddCurrentTaskToDelayedList>
}
 8003610:	bf00      	nop
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000860 	.word	0x20000860

0800361c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10a      	bne.n	8003644 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	617b      	str	r3, [r7, #20]
}
 8003640:	bf00      	nop
 8003642:	e7fe      	b.n	8003642 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <vTaskPlaceOnEventListRestricted+0x54>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3318      	adds	r3, #24
 800364a:	4619      	mov	r1, r3
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f7fe fb2c 	bl	8001caa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	68b8      	ldr	r0, [r7, #8]
 8003662:	f000 fb5d 	bl	8003d20 <prvAddCurrentTaskToDelayedList>
	}
 8003666:	bf00      	nop
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000860 	.word	0x20000860

08003674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	60fb      	str	r3, [r7, #12]
}
 800369c:	bf00      	nop
 800369e:	e7fe      	b.n	800369e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	3318      	adds	r3, #24
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe fb5b 	bl	8001d60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036aa:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <xTaskRemoveFromEventList+0xb0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11d      	bne.n	80036ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	3304      	adds	r3, #4
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fb52 	bl	8001d60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <xTaskRemoveFromEventList+0xb4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d903      	bls.n	80036d0 <xTaskRemoveFromEventList+0x5c>
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	4a16      	ldr	r2, [pc, #88]	; (8003728 <xTaskRemoveFromEventList+0xb4>)
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4a13      	ldr	r2, [pc, #76]	; (800372c <xTaskRemoveFromEventList+0xb8>)
 80036de:	441a      	add	r2, r3
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f7fe fadf 	bl	8001caa <vListInsertEnd>
 80036ec:	e005      	b.n	80036fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	3318      	adds	r3, #24
 80036f2:	4619      	mov	r1, r3
 80036f4:	480e      	ldr	r0, [pc, #56]	; (8003730 <xTaskRemoveFromEventList+0xbc>)
 80036f6:	f7fe fad8 	bl	8001caa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <xTaskRemoveFromEventList+0xc0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	429a      	cmp	r2, r3
 8003706:	d905      	bls.n	8003714 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003708:	2301      	movs	r3, #1
 800370a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <xTaskRemoveFromEventList+0xc4>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e001      	b.n	8003718 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003718:	697b      	ldr	r3, [r7, #20]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000d5c 	.word	0x20000d5c
 8003728:	20000d3c 	.word	0x20000d3c
 800372c:	20000864 	.word	0x20000864
 8003730:	20000cf4 	.word	0x20000cf4
 8003734:	20000860 	.word	0x20000860
 8003738:	20000d48 	.word	0x20000d48

0800373c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <vTaskInternalSetTimeOutState+0x24>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <vTaskInternalSetTimeOutState+0x28>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	605a      	str	r2, [r3, #4]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000d4c 	.word	0x20000d4c
 8003764:	20000d38 	.word	0x20000d38

08003768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	613b      	str	r3, [r7, #16]
}
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	60fb      	str	r3, [r7, #12]
}
 80037a6:	bf00      	nop
 80037a8:	e7fe      	b.n	80037a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80037aa:	f000 ff0f 	bl	80045cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80037ae:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <xTaskCheckForTimeOut+0xbc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d102      	bne.n	80037ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	e023      	b.n	8003816 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <xTaskCheckForTimeOut+0xc0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d007      	beq.n	80037ea <xTaskCheckForTimeOut+0x82>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d302      	bcc.n	80037ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	e015      	b.n	8003816 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d20b      	bcs.n	800380c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	1ad2      	subs	r2, r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ff9b 	bl	800373c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e004      	b.n	8003816 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003812:	2301      	movs	r3, #1
 8003814:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003816:	f000 ff09 	bl	800462c <vPortExitCritical>

	return xReturn;
 800381a:	69fb      	ldr	r3, [r7, #28]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3720      	adds	r7, #32
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000d38 	.word	0x20000d38
 8003828:	20000d4c 	.word	0x20000d4c

0800382c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <vTaskMissedYield+0x14>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]
}
 8003836:	bf00      	nop
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000d48 	.word	0x20000d48

08003844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800384c:	f000 f852 	bl	80038f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <prvIdleTask+0x28>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d9f9      	bls.n	800384c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <prvIdleTask+0x2c>)
 800385a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003868:	e7f0      	b.n	800384c <prvIdleTask+0x8>
 800386a:	bf00      	nop
 800386c:	20000864 	.word	0x20000864
 8003870:	e000ed04 	.word	0xe000ed04

08003874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800387a:	2300      	movs	r3, #0
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	e00c      	b.n	800389a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4a12      	ldr	r2, [pc, #72]	; (80038d4 <prvInitialiseTaskLists+0x60>)
 800388c:	4413      	add	r3, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe f9e0 	bl	8001c54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3301      	adds	r3, #1
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b37      	cmp	r3, #55	; 0x37
 800389e:	d9ef      	bls.n	8003880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80038a0:	480d      	ldr	r0, [pc, #52]	; (80038d8 <prvInitialiseTaskLists+0x64>)
 80038a2:	f7fe f9d7 	bl	8001c54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038a6:	480d      	ldr	r0, [pc, #52]	; (80038dc <prvInitialiseTaskLists+0x68>)
 80038a8:	f7fe f9d4 	bl	8001c54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80038ac:	480c      	ldr	r0, [pc, #48]	; (80038e0 <prvInitialiseTaskLists+0x6c>)
 80038ae:	f7fe f9d1 	bl	8001c54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038b2:	480c      	ldr	r0, [pc, #48]	; (80038e4 <prvInitialiseTaskLists+0x70>)
 80038b4:	f7fe f9ce 	bl	8001c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80038b8:	480b      	ldr	r0, [pc, #44]	; (80038e8 <prvInitialiseTaskLists+0x74>)
 80038ba:	f7fe f9cb 	bl	8001c54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80038be:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <prvInitialiseTaskLists+0x78>)
 80038c0:	4a05      	ldr	r2, [pc, #20]	; (80038d8 <prvInitialiseTaskLists+0x64>)
 80038c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038c4:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <prvInitialiseTaskLists+0x7c>)
 80038c6:	4a05      	ldr	r2, [pc, #20]	; (80038dc <prvInitialiseTaskLists+0x68>)
 80038c8:	601a      	str	r2, [r3, #0]
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000864 	.word	0x20000864
 80038d8:	20000cc4 	.word	0x20000cc4
 80038dc:	20000cd8 	.word	0x20000cd8
 80038e0:	20000cf4 	.word	0x20000cf4
 80038e4:	20000d08 	.word	0x20000d08
 80038e8:	20000d20 	.word	0x20000d20
 80038ec:	20000cec 	.word	0x20000cec
 80038f0:	20000cf0 	.word	0x20000cf0

080038f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038fa:	e019      	b.n	8003930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038fc:	f000 fe66 	bl	80045cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003900:	4b10      	ldr	r3, [pc, #64]	; (8003944 <prvCheckTasksWaitingTermination+0x50>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fa27 	bl	8001d60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <prvCheckTasksWaitingTermination+0x54>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3b01      	subs	r3, #1
 8003918:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <prvCheckTasksWaitingTermination+0x54>)
 800391a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <prvCheckTasksWaitingTermination+0x58>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3b01      	subs	r3, #1
 8003922:	4a0a      	ldr	r2, [pc, #40]	; (800394c <prvCheckTasksWaitingTermination+0x58>)
 8003924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003926:	f000 fe81 	bl	800462c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f810 	bl	8003950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <prvCheckTasksWaitingTermination+0x58>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e1      	bne.n	80038fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000d08 	.word	0x20000d08
 8003948:	20000d34 	.word	0x20000d34
 800394c:	20000d1c 	.word	0x20000d1c

08003950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800395e:	2b00      	cmp	r3, #0
 8003960:	d108      	bne.n	8003974 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fff4 	bl	8004954 <vPortFree>
				vPortFree( pxTCB );
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fff1 	bl	8004954 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003972:	e018      	b.n	80039a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800397a:	2b01      	cmp	r3, #1
 800397c:	d103      	bne.n	8003986 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 ffe8 	bl	8004954 <vPortFree>
	}
 8003984:	e00f      	b.n	80039a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800398c:	2b02      	cmp	r3, #2
 800398e:	d00a      	beq.n	80039a6 <prvDeleteTCB+0x56>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	60fb      	str	r3, [r7, #12]
}
 80039a2:	bf00      	nop
 80039a4:	e7fe      	b.n	80039a4 <prvDeleteTCB+0x54>
	}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039b6:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <prvResetNextTaskUnblockTime+0x40>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <prvResetNextTaskUnblockTime+0x14>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <prvResetNextTaskUnblockTime+0x16>
 80039c4:	2300      	movs	r3, #0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <prvResetNextTaskUnblockTime+0x44>)
 80039cc:	f04f 32ff 	mov.w	r2, #4294967295
 80039d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80039d2:	e008      	b.n	80039e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <prvResetNextTaskUnblockTime+0x40>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <prvResetNextTaskUnblockTime+0x44>)
 80039e4:	6013      	str	r3, [r2, #0]
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr
 80039f0:	20000cec 	.word	0x20000cec
 80039f4:	20000d54 	.word	0x20000d54

080039f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <xTaskGetSchedulerState+0x34>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a06:	2301      	movs	r3, #1
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	e008      	b.n	8003a1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <xTaskGetSchedulerState+0x38>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a14:	2302      	movs	r3, #2
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	e001      	b.n	8003a1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a1e:	687b      	ldr	r3, [r7, #4]
	}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000d40 	.word	0x20000d40
 8003a30:	20000d5c 	.word	0x20000d5c

08003a34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d056      	beq.n	8003af8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	4b2d      	ldr	r3, [pc, #180]	; (8003b04 <xTaskPriorityInherit+0xd0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d246      	bcs.n	8003ae6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	db06      	blt.n	8003a6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a60:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <xTaskPriorityInherit+0xd0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	6959      	ldr	r1, [r3, #20]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4a22      	ldr	r2, [pc, #136]	; (8003b08 <xTaskPriorityInherit+0xd4>)
 8003a80:	4413      	add	r3, r2
 8003a82:	4299      	cmp	r1, r3
 8003a84:	d101      	bne.n	8003a8a <xTaskPriorityInherit+0x56>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <xTaskPriorityInherit+0x58>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d022      	beq.n	8003ad6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	3304      	adds	r3, #4
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe f963 	bl	8001d60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <xTaskPriorityInherit+0xd0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa8:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <xTaskPriorityInherit+0xd8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d903      	bls.n	8003ab8 <xTaskPriorityInherit+0x84>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <xTaskPriorityInherit+0xd8>)
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4a10      	ldr	r2, [pc, #64]	; (8003b08 <xTaskPriorityInherit+0xd4>)
 8003ac6:	441a      	add	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f7fe f8eb 	bl	8001caa <vListInsertEnd>
 8003ad4:	e004      	b.n	8003ae0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <xTaskPriorityInherit+0xd0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e008      	b.n	8003af8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <xTaskPriorityInherit+0xd0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d201      	bcs.n	8003af8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003af8:	68fb      	ldr	r3, [r7, #12]
	}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000860 	.word	0x20000860
 8003b08:	20000864 	.word	0x20000864
 8003b0c:	20000d3c 	.word	0x20000d3c

08003b10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d056      	beq.n	8003bd4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b26:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <xTaskPriorityDisinherit+0xd0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d00a      	beq.n	8003b46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60fb      	str	r3, [r7, #12]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	60bb      	str	r3, [r7, #8]
}
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b68:	1e5a      	subs	r2, r3, #1
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d02c      	beq.n	8003bd4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d128      	bne.n	8003bd4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	3304      	adds	r3, #4
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe f8ea 	bl	8001d60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <xTaskPriorityDisinherit+0xd4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d903      	bls.n	8003bb4 <xTaskPriorityDisinherit+0xa4>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <xTaskPriorityDisinherit+0xd4>)
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <xTaskPriorityDisinherit+0xd8>)
 8003bc2:	441a      	add	r2, r3
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f7fe f86d 	bl	8001caa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003bd4:	697b      	ldr	r3, [r7, #20]
	}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000860 	.word	0x20000860
 8003be4:	20000d3c 	.word	0x20000d3c
 8003be8:	20000864 	.word	0x20000864

08003bec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d06f      	beq.n	8003ce4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	60fb      	str	r3, [r7, #12]
}
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d902      	bls.n	8003c32 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	e002      	b.n	8003c38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d050      	beq.n	8003ce4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d14b      	bne.n	8003ce4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d10a      	bne.n	8003c6c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60bb      	str	r3, [r7, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	db04      	blt.n	8003c8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	6959      	ldr	r1, [r3, #20]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003c9a:	4413      	add	r3, r2
 8003c9c:	4299      	cmp	r1, r3
 8003c9e:	d101      	bne.n	8003ca4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01c      	beq.n	8003ce4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3304      	adds	r3, #4
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe f856 	bl	8001d60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d903      	bls.n	8003cc8 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	4a0b      	ldr	r2, [pc, #44]	; (8003cf4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4a06      	ldr	r2, [pc, #24]	; (8003cf0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003cd6:	441a      	add	r2, r3
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f7fd ffe3 	bl	8001caa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ce4:	bf00      	nop
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000860 	.word	0x20000860
 8003cf0:	20000864 	.word	0x20000864
 8003cf4:	20000d3c 	.word	0x20000d3c

08003cf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <pvTaskIncrementMutexHeldCount+0x24>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <pvTaskIncrementMutexHeldCount+0x24>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d0a:	3201      	adds	r2, #1
 8003d0c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003d0e:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <pvTaskIncrementMutexHeldCount+0x24>)
 8003d10:	681b      	ldr	r3, [r3, #0]
	}
 8003d12:	4618      	mov	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000860 	.word	0x20000860

08003d20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d2a:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d30:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3304      	adds	r3, #4
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe f812 	bl	8001d60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d10a      	bne.n	8003d5a <prvAddCurrentTaskToDelayedList+0x3a>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4819      	ldr	r0, [pc, #100]	; (8003db8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003d54:	f7fd ffa9 	bl	8001caa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d58:	e026      	b.n	8003da8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d62:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d209      	bcs.n	8003d86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f7fd ffb6 	bl	8001cf0 <vListInsert>
}
 8003d84:	e010      	b.n	8003da8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d86:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f7fd ffac 	bl	8001cf0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d202      	bcs.n	8003da8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003da2:	4a08      	ldr	r2, [pc, #32]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	6013      	str	r3, [r2, #0]
}
 8003da8:	bf00      	nop
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000d38 	.word	0x20000d38
 8003db4:	20000860 	.word	0x20000860
 8003db8:	20000d20 	.word	0x20000d20
 8003dbc:	20000cf0 	.word	0x20000cf0
 8003dc0:	20000cec 	.word	0x20000cec
 8003dc4:	20000d54 	.word	0x20000d54

08003dc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003dd2:	f000 facb 	bl	800436c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003dd6:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <xTimerCreateTimerTask+0x80>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d021      	beq.n	8003e22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003de6:	1d3a      	adds	r2, r7, #4
 8003de8:	f107 0108 	add.w	r1, r7, #8
 8003dec:	f107 030c 	add.w	r3, r7, #12
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fd ff15 	bl	8001c20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	9202      	str	r2, [sp, #8]
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	2302      	movs	r3, #2
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	2300      	movs	r3, #0
 8003e06:	460a      	mov	r2, r1
 8003e08:	4910      	ldr	r1, [pc, #64]	; (8003e4c <xTimerCreateTimerTask+0x84>)
 8003e0a:	4811      	ldr	r0, [pc, #68]	; (8003e50 <xTimerCreateTimerTask+0x88>)
 8003e0c:	f7fe ffdc 	bl	8002dc8 <xTaskCreateStatic>
 8003e10:	4603      	mov	r3, r0
 8003e12:	4a10      	ldr	r2, [pc, #64]	; (8003e54 <xTimerCreateTimerTask+0x8c>)
 8003e14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e16:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <xTimerCreateTimerTask+0x8c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	613b      	str	r3, [r7, #16]
}
 8003e3a:	bf00      	nop
 8003e3c:	e7fe      	b.n	8003e3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003e3e:	697b      	ldr	r3, [r7, #20]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000d90 	.word	0x20000d90
 8003e4c:	08004c6c 	.word	0x08004c6c
 8003e50:	08003f75 	.word	0x08003f75
 8003e54:	20000d94 	.word	0x20000d94

08003e58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	; 0x28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	623b      	str	r3, [r7, #32]
}
 8003e82:	bf00      	nop
 8003e84:	e7fe      	b.n	8003e84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003e86:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <xTimerGenericCommand+0x98>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02a      	beq.n	8003ee4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	dc18      	bgt.n	8003ed2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ea0:	f7ff fdaa 	bl	80039f8 <xTaskGetSchedulerState>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d109      	bne.n	8003ebe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003eaa:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <xTimerGenericCommand+0x98>)
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	f107 0110 	add.w	r1, r7, #16
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb6:	f7fe f927 	bl	8002108 <xQueueGenericSend>
 8003eba:	6278      	str	r0, [r7, #36]	; 0x24
 8003ebc:	e012      	b.n	8003ee4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <xTimerGenericCommand+0x98>)
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	f107 0110 	add.w	r1, r7, #16
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f7fe f91d 	bl	8002108 <xQueueGenericSend>
 8003ece:	6278      	str	r0, [r7, #36]	; 0x24
 8003ed0:	e008      	b.n	8003ee4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <xTimerGenericCommand+0x98>)
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	f107 0110 	add.w	r1, r7, #16
 8003eda:	2300      	movs	r3, #0
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	f7fe fa11 	bl	8002304 <xQueueGenericSendFromISR>
 8003ee2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3728      	adds	r7, #40	; 0x28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000d90 	.word	0x20000d90

08003ef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <prvProcessExpiredTimer+0x7c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fd ff27 	bl	8001d60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d122      	bne.n	8003f60 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	18d1      	adds	r1, r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	6978      	ldr	r0, [r7, #20]
 8003f28:	f000 f8c8 	bl	80040bc <prvInsertTimerInActiveList>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d016      	beq.n	8003f60 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f32:	2300      	movs	r3, #0
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	2300      	movs	r3, #0
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	6978      	ldr	r0, [r7, #20]
 8003f3e:	f7ff ff8b 	bl	8003e58 <xTimerGenericCommand>
 8003f42:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	60fb      	str	r3, [r7, #12]
}
 8003f5c:	bf00      	nop
 8003f5e:	e7fe      	b.n	8003f5e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	6978      	ldr	r0, [r7, #20]
 8003f66:	4798      	blx	r3
}
 8003f68:	bf00      	nop
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000d88 	.word	0x20000d88

08003f74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f7c:	f107 0308 	add.w	r3, r7, #8
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 f857 	bl	8004034 <prvGetNextExpireTime>
 8003f86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f803 	bl	8003f98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f92:	f000 f8d5 	bl	8004140 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f96:	e7f1      	b.n	8003f7c <prvTimerTask+0x8>

08003f98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003fa2:	f7ff f943 	bl	800322c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fa6:	f107 0308 	add.w	r3, r7, #8
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f866 	bl	800407c <prvSampleTimeNow>
 8003fb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d130      	bne.n	800401a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <prvProcessTimerOrBlockTask+0x3c>
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d806      	bhi.n	8003fd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003fc6:	f7ff f93f 	bl	8003248 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003fca:	68f9      	ldr	r1, [r7, #12]
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff ff91 	bl	8003ef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003fd2:	e024      	b.n	800401e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fda:	4b13      	ldr	r3, [pc, #76]	; (8004028 <prvProcessTimerOrBlockTask+0x90>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003fec:	4b0f      	ldr	r3, [pc, #60]	; (800402c <prvProcessTimerOrBlockTask+0x94>)
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f7fe feb1 	bl	8002d60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003ffe:	f7ff f923 	bl	8003248 <xTaskResumeAll>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <prvProcessTimerOrBlockTask+0x98>)
 800400a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	f3bf 8f6f 	isb	sy
}
 8004018:	e001      	b.n	800401e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800401a:	f7ff f915 	bl	8003248 <xTaskResumeAll>
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000d8c 	.word	0x20000d8c
 800402c:	20000d90 	.word	0x20000d90
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <prvGetNextExpireTime+0x44>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf0c      	ite	eq
 8004046:	2301      	moveq	r3, #1
 8004048:	2300      	movne	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d105      	bne.n	8004066 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800405a:	4b07      	ldr	r3, [pc, #28]	; (8004078 <prvGetNextExpireTime+0x44>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e001      	b.n	800406a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800406a:	68fb      	ldr	r3, [r7, #12]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000d88 	.word	0x20000d88

0800407c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004084:	f7ff f97e 	bl	8003384 <xTaskGetTickCount>
 8004088:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <prvSampleTimeNow+0x3c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	429a      	cmp	r2, r3
 8004092:	d205      	bcs.n	80040a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004094:	f000 f908 	bl	80042a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e002      	b.n	80040a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80040a6:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <prvSampleTimeNow+0x3c>)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80040ac:	68fb      	ldr	r3, [r7, #12]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000d98 	.word	0x20000d98

080040bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d812      	bhi.n	8004108 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	1ad2      	subs	r2, r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d302      	bcc.n	80040f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80040f0:	2301      	movs	r3, #1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e01b      	b.n	800412e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <prvInsertTimerInActiveList+0x7c>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f7fd fdf5 	bl	8001cf0 <vListInsert>
 8004106:	e012      	b.n	800412e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d206      	bcs.n	800411e <prvInsertTimerInActiveList+0x62>
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d302      	bcc.n	800411e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004118:	2301      	movs	r3, #1
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	e007      	b.n	800412e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <prvInsertTimerInActiveList+0x80>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3304      	adds	r3, #4
 8004126:	4619      	mov	r1, r3
 8004128:	4610      	mov	r0, r2
 800412a:	f7fd fde1 	bl	8001cf0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800412e:	697b      	ldr	r3, [r7, #20]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000d8c 	.word	0x20000d8c
 800413c:	20000d88 	.word	0x20000d88

08004140 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08e      	sub	sp, #56	; 0x38
 8004144:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004146:	e09d      	b.n	8004284 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	da18      	bge.n	8004180 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	3304      	adds	r3, #4
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	61fb      	str	r3, [r7, #28]
}
 800416c:	bf00      	nop
 800416e:	e7fe      	b.n	800416e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004176:	6850      	ldr	r0, [r2, #4]
 8004178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800417a:	6892      	ldr	r2, [r2, #8]
 800417c:	4611      	mov	r1, r2
 800417e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	db7d      	blt.n	8004282 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d004      	beq.n	800419c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	3304      	adds	r3, #4
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd fde2 	bl	8001d60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800419c:	463b      	mov	r3, r7
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff ff6c 	bl	800407c <prvSampleTimeNow>
 80041a4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b09      	cmp	r3, #9
 80041aa:	d86b      	bhi.n	8004284 <prvProcessReceivedCommands+0x144>
 80041ac:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <prvProcessReceivedCommands+0x74>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041dd 	.word	0x080041dd
 80041bc:	080041dd 	.word	0x080041dd
 80041c0:	08004285 	.word	0x08004285
 80041c4:	08004239 	.word	0x08004239
 80041c8:	08004271 	.word	0x08004271
 80041cc:	080041dd 	.word	0x080041dd
 80041d0:	080041dd 	.word	0x080041dd
 80041d4:	08004285 	.word	0x08004285
 80041d8:	08004239 	.word	0x08004239
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	18d1      	adds	r1, r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ea:	f7ff ff67 	bl	80040bc <prvInsertTimerInActiveList>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d047      	beq.n	8004284 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d13f      	bne.n	8004284 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	441a      	add	r2, r3
 800420c:	2300      	movs	r3, #0
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2300      	movs	r3, #0
 8004212:	2100      	movs	r1, #0
 8004214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004216:	f7ff fe1f 	bl	8003e58 <xTimerGenericCommand>
 800421a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d130      	bne.n	8004284 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	61bb      	str	r3, [r7, #24]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	617b      	str	r3, [r7, #20]
}
 8004258:	bf00      	nop
 800425a:	e7fe      	b.n	800425a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	699a      	ldr	r2, [r3, #24]
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	18d1      	adds	r1, r2, r3
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800426a:	f7ff ff27 	bl	80040bc <prvInsertTimerInActiveList>
					break;
 800426e:	e009      	b.n	8004284 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800427a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800427c:	f000 fb6a 	bl	8004954 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004280:	e000      	b.n	8004284 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004282:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004284:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <prvProcessReceivedCommands+0x164>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	1d39      	adds	r1, r7, #4
 800428a:	2200      	movs	r2, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f7fe f95f 	bl	8002550 <xQueueReceive>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	f47f af57 	bne.w	8004148 <prvProcessReceivedCommands+0x8>
	}
}
 800429a:	bf00      	nop
 800429c:	bf00      	nop
 800429e:	3730      	adds	r7, #48	; 0x30
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000d90 	.word	0x20000d90

080042a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042ae:	e045      	b.n	800433c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042b0:	4b2c      	ldr	r3, [pc, #176]	; (8004364 <prvSwitchTimerLists+0xbc>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042ba:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <prvSwitchTimerLists+0xbc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3304      	adds	r3, #4
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fd fd49 	bl	8001d60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d12e      	bne.n	800433c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d90e      	bls.n	800430e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042fc:	4b19      	ldr	r3, [pc, #100]	; (8004364 <prvSwitchTimerLists+0xbc>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f7fd fcf2 	bl	8001cf0 <vListInsert>
 800430c:	e016      	b.n	800433c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800430e:	2300      	movs	r3, #0
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2300      	movs	r3, #0
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	2100      	movs	r1, #0
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff fd9d 	bl	8003e58 <xTimerGenericCommand>
 800431e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <prvSwitchTimerLists+0x94>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	603b      	str	r3, [r7, #0]
}
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <prvSwitchTimerLists+0xbc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1b4      	bne.n	80042b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <prvSwitchTimerLists+0xbc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <prvSwitchTimerLists+0xc0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a04      	ldr	r2, [pc, #16]	; (8004364 <prvSwitchTimerLists+0xbc>)
 8004352:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <prvSwitchTimerLists+0xc0>)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	6013      	str	r3, [r2, #0]
}
 800435a:	bf00      	nop
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000d88 	.word	0x20000d88
 8004368:	20000d8c 	.word	0x20000d8c

0800436c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004372:	f000 f92b 	bl	80045cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <prvCheckForValidListAndQueue+0x60>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d120      	bne.n	80043c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800437e:	4814      	ldr	r0, [pc, #80]	; (80043d0 <prvCheckForValidListAndQueue+0x64>)
 8004380:	f7fd fc68 	bl	8001c54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004384:	4813      	ldr	r0, [pc, #76]	; (80043d4 <prvCheckForValidListAndQueue+0x68>)
 8004386:	f7fd fc65 	bl	8001c54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800438a:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <prvCheckForValidListAndQueue+0x6c>)
 800438c:	4a10      	ldr	r2, [pc, #64]	; (80043d0 <prvCheckForValidListAndQueue+0x64>)
 800438e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004390:	4b12      	ldr	r3, [pc, #72]	; (80043dc <prvCheckForValidListAndQueue+0x70>)
 8004392:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <prvCheckForValidListAndQueue+0x68>)
 8004394:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004396:	2300      	movs	r3, #0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <prvCheckForValidListAndQueue+0x74>)
 800439c:	4a11      	ldr	r2, [pc, #68]	; (80043e4 <prvCheckForValidListAndQueue+0x78>)
 800439e:	2110      	movs	r1, #16
 80043a0:	200a      	movs	r0, #10
 80043a2:	f7fd fd6f 	bl	8001e84 <xQueueGenericCreateStatic>
 80043a6:	4603      	mov	r3, r0
 80043a8:	4a08      	ldr	r2, [pc, #32]	; (80043cc <prvCheckForValidListAndQueue+0x60>)
 80043aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <prvCheckForValidListAndQueue+0x60>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <prvCheckForValidListAndQueue+0x60>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	490b      	ldr	r1, [pc, #44]	; (80043e8 <prvCheckForValidListAndQueue+0x7c>)
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe fc7e 	bl	8002cbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043c0:	f000 f934 	bl	800462c <vPortExitCritical>
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000d90 	.word	0x20000d90
 80043d0:	20000d60 	.word	0x20000d60
 80043d4:	20000d74 	.word	0x20000d74
 80043d8:	20000d88 	.word	0x20000d88
 80043dc:	20000d8c 	.word	0x20000d8c
 80043e0:	20000e3c 	.word	0x20000e3c
 80043e4:	20000d9c 	.word	0x20000d9c
 80043e8:	08004c74 	.word	0x08004c74

080043ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3b04      	subs	r3, #4
 80043fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3b04      	subs	r3, #4
 800440a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f023 0201 	bic.w	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3b04      	subs	r3, #4
 800441a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800441c:	4a08      	ldr	r2, [pc, #32]	; (8004440 <pxPortInitialiseStack+0x54>)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3b14      	subs	r3, #20
 8004426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3b20      	subs	r3, #32
 8004432:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004434:	68fb      	ldr	r3, [r7, #12]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	08004445 	.word	0x08004445

08004444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800444a:	2300      	movs	r3, #0
 800444c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <prvTaskExitError+0x54>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d00a      	beq.n	800446e <prvTaskExitError+0x2a>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	60fb      	str	r3, [r7, #12]
}
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <prvTaskExitError+0x28>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	60bb      	str	r3, [r7, #8]
}
 8004480:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004482:	bf00      	nop
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0fc      	beq.n	8004484 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000124 	.word	0x20000124
 800449c:	00000000 	.word	0x00000000

080044a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044a0:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <pxCurrentTCBConst2>)
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	6808      	ldr	r0, [r1, #0]
 80044a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044aa:	f380 8809 	msr	PSP, r0
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f380 8811 	msr	BASEPRI, r0
 80044ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80044be:	4770      	bx	lr

080044c0 <pxCurrentTCBConst2>:
 80044c0:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop

080044c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80044c8:	4806      	ldr	r0, [pc, #24]	; (80044e4 <prvPortStartFirstTask+0x1c>)
 80044ca:	6800      	ldr	r0, [r0, #0]
 80044cc:	6800      	ldr	r0, [r0, #0]
 80044ce:	f380 8808 	msr	MSP, r0
 80044d2:	b662      	cpsie	i
 80044d4:	b661      	cpsie	f
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	df00      	svc	0
 80044e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044e2:	bf00      	nop
 80044e4:	e000ed08 	.word	0xe000ed08

080044e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ee:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <xPortStartScheduler+0xd0>)
 80044f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	22ff      	movs	r2, #255	; 0xff
 80044fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004510:	b2da      	uxtb	r2, r3
 8004512:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <xPortStartScheduler+0xd4>)
 8004514:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004516:	4b2a      	ldr	r3, [pc, #168]	; (80045c0 <xPortStartScheduler+0xd8>)
 8004518:	2207      	movs	r2, #7
 800451a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800451c:	e009      	b.n	8004532 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800451e:	4b28      	ldr	r3, [pc, #160]	; (80045c0 <xPortStartScheduler+0xd8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3b01      	subs	r3, #1
 8004524:	4a26      	ldr	r2, [pc, #152]	; (80045c0 <xPortStartScheduler+0xd8>)
 8004526:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d0ef      	beq.n	800451e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800453e:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <xPortStartScheduler+0xd8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f1c3 0307 	rsb	r3, r3, #7
 8004546:	2b04      	cmp	r3, #4
 8004548:	d00a      	beq.n	8004560 <xPortStartScheduler+0x78>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	60bb      	str	r3, [r7, #8]
}
 800455c:	bf00      	nop
 800455e:	e7fe      	b.n	800455e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004560:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <xPortStartScheduler+0xd8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	4a16      	ldr	r2, [pc, #88]	; (80045c0 <xPortStartScheduler+0xd8>)
 8004568:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800456a:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <xPortStartScheduler+0xd8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004572:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <xPortStartScheduler+0xd8>)
 8004574:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <xPortStartScheduler+0xdc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a10      	ldr	r2, [pc, #64]	; (80045c4 <xPortStartScheduler+0xdc>)
 8004584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004588:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <xPortStartScheduler+0xdc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a0d      	ldr	r2, [pc, #52]	; (80045c4 <xPortStartScheduler+0xdc>)
 8004590:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004594:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004596:	f000 f8b9 	bl	800470c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <xPortStartScheduler+0xe0>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045a0:	f7ff ff92 	bl	80044c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045a4:	f7fe ffba 	bl	800351c <vTaskSwitchContext>
	prvTaskExitError();
 80045a8:	f7ff ff4c 	bl	8004444 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	e000e400 	.word	0xe000e400
 80045bc:	20000e8c 	.word	0x20000e8c
 80045c0:	20000e90 	.word	0x20000e90
 80045c4:	e000ed20 	.word	0xe000ed20
 80045c8:	20000124 	.word	0x20000124

080045cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
	__asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	607b      	str	r3, [r7, #4]
}
 80045e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045e6:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <vPortEnterCritical+0x58>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3301      	adds	r3, #1
 80045ec:	4a0d      	ldr	r2, [pc, #52]	; (8004624 <vPortEnterCritical+0x58>)
 80045ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <vPortEnterCritical+0x58>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10f      	bne.n	8004618 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <vPortEnterCritical+0x5c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <vPortEnterCritical+0x4c>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	603b      	str	r3, [r7, #0]
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <vPortEnterCritical+0x4a>
	}
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000124 	.word	0x20000124
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <vPortExitCritical+0x4c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <vPortExitCritical+0x24>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	607b      	str	r3, [r7, #4]
}
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <vPortExitCritical+0x4c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3b01      	subs	r3, #1
 8004656:	4a08      	ldr	r2, [pc, #32]	; (8004678 <vPortExitCritical+0x4c>)
 8004658:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <vPortExitCritical+0x4c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d105      	bne.n	800466e <vPortExitCritical+0x42>
 8004662:	2300      	movs	r3, #0
 8004664:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f383 8811 	msr	BASEPRI, r3
}
 800466c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	20000124 	.word	0x20000124
 800467c:	00000000 	.word	0x00000000

08004680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004680:	f3ef 8009 	mrs	r0, PSP
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <pxCurrentTCBConst>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004690:	6010      	str	r0, [r2, #0]
 8004692:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004696:	f04f 0050 	mov.w	r0, #80	; 0x50
 800469a:	f380 8811 	msr	BASEPRI, r0
 800469e:	f7fe ff3d 	bl	800351c <vTaskSwitchContext>
 80046a2:	f04f 0000 	mov.w	r0, #0
 80046a6:	f380 8811 	msr	BASEPRI, r0
 80046aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80046ae:	6819      	ldr	r1, [r3, #0]
 80046b0:	6808      	ldr	r0, [r1, #0]
 80046b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046b6:	f380 8809 	msr	PSP, r0
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	4770      	bx	lr

080046c0 <pxCurrentTCBConst>:
 80046c0:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop

080046c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	607b      	str	r3, [r7, #4]
}
 80046e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046e2:	f7fe fe5d 	bl	80033a0 <xTaskIncrementTick>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <xPortSysTickHandler+0x40>)
 80046ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	2300      	movs	r3, #0
 80046f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f383 8811 	msr	BASEPRI, r3
}
 80046fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <vPortSetupTimerInterrupt+0x30>)
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <vPortSetupTimerInterrupt+0x34>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800471c:	4b09      	ldr	r3, [pc, #36]	; (8004744 <vPortSetupTimerInterrupt+0x38>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a09      	ldr	r2, [pc, #36]	; (8004748 <vPortSetupTimerInterrupt+0x3c>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	4a08      	ldr	r2, [pc, #32]	; (800474c <vPortSetupTimerInterrupt+0x40>)
 800472a:	3b01      	subs	r3, #1
 800472c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800472e:	4b03      	ldr	r3, [pc, #12]	; (800473c <vPortSetupTimerInterrupt+0x30>)
 8004730:	2207      	movs	r2, #7
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	e000e010 	.word	0xe000e010
 8004740:	e000e018 	.word	0xe000e018
 8004744:	20000118 	.word	0x20000118
 8004748:	10624dd3 	.word	0x10624dd3
 800474c:	e000e014 	.word	0xe000e014

08004750 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004756:	f3ef 8305 	mrs	r3, IPSR
 800475a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b0f      	cmp	r3, #15
 8004760:	d914      	bls.n	800478c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004762:	4a16      	ldr	r2, [pc, #88]	; (80047bc <vPortValidateInterruptPriority+0x6c>)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800476c:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <vPortValidateInterruptPriority+0x70>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	7afa      	ldrb	r2, [r7, #11]
 8004772:	429a      	cmp	r2, r3
 8004774:	d20a      	bcs.n	800478c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	607b      	str	r3, [r7, #4]
}
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <vPortValidateInterruptPriority+0x74>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <vPortValidateInterruptPriority+0x78>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d90a      	bls.n	80047b2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	603b      	str	r3, [r7, #0]
}
 80047ae:	bf00      	nop
 80047b0:	e7fe      	b.n	80047b0 <vPortValidateInterruptPriority+0x60>
	}
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr
 80047bc:	e000e3f0 	.word	0xe000e3f0
 80047c0:	20000e8c 	.word	0x20000e8c
 80047c4:	e000ed0c 	.word	0xe000ed0c
 80047c8:	20000e90 	.word	0x20000e90

080047cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047d8:	f7fe fd28 	bl	800322c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047dc:	4b58      	ldr	r3, [pc, #352]	; (8004940 <pvPortMalloc+0x174>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80047e4:	f000 f910 	bl	8004a08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047e8:	4b56      	ldr	r3, [pc, #344]	; (8004944 <pvPortMalloc+0x178>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f040 808e 	bne.w	8004912 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01d      	beq.n	8004838 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80047fc:	2208      	movs	r2, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	2b00      	cmp	r3, #0
 800480c:	d014      	beq.n	8004838 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f023 0307 	bic.w	r3, r3, #7
 8004814:	3308      	adds	r3, #8
 8004816:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <pvPortMalloc+0x6c>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	617b      	str	r3, [r7, #20]
}
 8004834:	bf00      	nop
 8004836:	e7fe      	b.n	8004836 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d069      	beq.n	8004912 <pvPortMalloc+0x146>
 800483e:	4b42      	ldr	r3, [pc, #264]	; (8004948 <pvPortMalloc+0x17c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	429a      	cmp	r2, r3
 8004846:	d864      	bhi.n	8004912 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004848:	4b40      	ldr	r3, [pc, #256]	; (800494c <pvPortMalloc+0x180>)
 800484a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800484c:	4b3f      	ldr	r3, [pc, #252]	; (800494c <pvPortMalloc+0x180>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004852:	e004      	b.n	800485e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d903      	bls.n	8004870 <pvPortMalloc+0xa4>
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f1      	bne.n	8004854 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004870:	4b33      	ldr	r3, [pc, #204]	; (8004940 <pvPortMalloc+0x174>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004876:	429a      	cmp	r2, r3
 8004878:	d04b      	beq.n	8004912 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2208      	movs	r2, #8
 8004880:	4413      	add	r3, r2
 8004882:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	1ad2      	subs	r2, r2, r3
 8004894:	2308      	movs	r3, #8
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	429a      	cmp	r2, r3
 800489a:	d91f      	bls.n	80048dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800489c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4413      	add	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <pvPortMalloc+0xf8>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	613b      	str	r3, [r7, #16]
}
 80048c0:	bf00      	nop
 80048c2:	e7fe      	b.n	80048c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048d6:	69b8      	ldr	r0, [r7, #24]
 80048d8:	f000 f8f8 	bl	8004acc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <pvPortMalloc+0x17c>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <pvPortMalloc+0x17c>)
 80048e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048ea:	4b17      	ldr	r3, [pc, #92]	; (8004948 <pvPortMalloc+0x17c>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b18      	ldr	r3, [pc, #96]	; (8004950 <pvPortMalloc+0x184>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d203      	bcs.n	80048fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048f6:	4b14      	ldr	r3, [pc, #80]	; (8004948 <pvPortMalloc+0x17c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a15      	ldr	r2, [pc, #84]	; (8004950 <pvPortMalloc+0x184>)
 80048fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <pvPortMalloc+0x178>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	431a      	orrs	r2, r3
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004912:	f7fe fc99 	bl	8003248 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <pvPortMalloc+0x16a>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	60fb      	str	r3, [r7, #12]
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <pvPortMalloc+0x168>
	return pvReturn;
 8004936:	69fb      	ldr	r3, [r7, #28]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3728      	adds	r7, #40	; 0x28
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20001a9c 	.word	0x20001a9c
 8004944:	20001aa8 	.word	0x20001aa8
 8004948:	20001aa0 	.word	0x20001aa0
 800494c:	20001a94 	.word	0x20001a94
 8004950:	20001aa4 	.word	0x20001aa4

08004954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d048      	beq.n	80049f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004966:	2308      	movs	r3, #8
 8004968:	425b      	negs	r3, r3
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4413      	add	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <vPortFree+0xac>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10a      	bne.n	8004998 <vPortFree+0x44>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	60fb      	str	r3, [r7, #12]
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <vPortFree+0x62>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	60bb      	str	r3, [r7, #8]
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <vPortFree+0xac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4013      	ands	r3, r2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d019      	beq.n	80049f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d115      	bne.n	80049f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <vPortFree+0xac>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	401a      	ands	r2, r3
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049dc:	f7fe fc26 	bl	800322c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <vPortFree+0xb0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4413      	add	r3, r2
 80049ea:	4a06      	ldr	r2, [pc, #24]	; (8004a04 <vPortFree+0xb0>)
 80049ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049ee:	6938      	ldr	r0, [r7, #16]
 80049f0:	f000 f86c 	bl	8004acc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80049f4:	f7fe fc28 	bl	8003248 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049f8:	bf00      	nop
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20001aa8 	.word	0x20001aa8
 8004a04:	20001aa0 	.word	0x20001aa0

08004a08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a14:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <prvHeapInit+0xac>)
 8004a16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00c      	beq.n	8004a3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3307      	adds	r3, #7
 8004a26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0307 	bic.w	r3, r3, #7
 8004a2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <prvHeapInit+0xac>)
 8004a38:	4413      	add	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a40:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <prvHeapInit+0xb0>)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a46:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <prvHeapInit+0xb0>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	4413      	add	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a54:	2208      	movs	r2, #8
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0307 	bic.w	r3, r3, #7
 8004a62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a15      	ldr	r2, [pc, #84]	; (8004abc <prvHeapInit+0xb4>)
 8004a68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a6a:	4b14      	ldr	r3, [pc, #80]	; (8004abc <prvHeapInit+0xb4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <prvHeapInit+0xb4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	1ad2      	subs	r2, r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <prvHeapInit+0xb4>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <prvHeapInit+0xb8>)
 8004a96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4a09      	ldr	r2, [pc, #36]	; (8004ac4 <prvHeapInit+0xbc>)
 8004a9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <prvHeapInit+0xc0>)
 8004aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004aa6:	601a      	str	r2, [r3, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000e94 	.word	0x20000e94
 8004ab8:	20001a94 	.word	0x20001a94
 8004abc:	20001a9c 	.word	0x20001a9c
 8004ac0:	20001aa4 	.word	0x20001aa4
 8004ac4:	20001aa0 	.word	0x20001aa0
 8004ac8:	20001aa8 	.word	0x20001aa8

08004acc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <prvInsertBlockIntoFreeList+0xa8>)
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e002      	b.n	8004ae0 <prvInsertBlockIntoFreeList+0x14>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d8f7      	bhi.n	8004ada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	4413      	add	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d108      	bne.n	8004b0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	441a      	add	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	441a      	add	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d118      	bne.n	8004b54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <prvInsertBlockIntoFreeList+0xac>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d00d      	beq.n	8004b4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e008      	b.n	8004b5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <prvInsertBlockIntoFreeList+0xac>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e003      	b.n	8004b5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d002      	beq.n	8004b6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr
 8004b74:	20001a94 	.word	0x20001a94
 8004b78:	20001a9c 	.word	0x20001a9c

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	2600      	movs	r6, #0
 8004b80:	4d0c      	ldr	r5, [pc, #48]	; (8004bb4 <__libc_init_array+0x38>)
 8004b82:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <__libc_init_array+0x3c>)
 8004b84:	1b64      	subs	r4, r4, r5
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	f000 f830 	bl	8004bf0 <_init>
 8004b90:	2600      	movs	r6, #0
 8004b92:	4d0a      	ldr	r5, [pc, #40]	; (8004bbc <__libc_init_array+0x40>)
 8004b94:	4c0a      	ldr	r4, [pc, #40]	; (8004bc0 <__libc_init_array+0x44>)
 8004b96:	1b64      	subs	r4, r4, r5
 8004b98:	10a4      	asrs	r4, r4, #2
 8004b9a:	42a6      	cmp	r6, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba4:	4798      	blx	r3
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bae:	4798      	blx	r3
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	08004d44 	.word	0x08004d44
 8004bb8:	08004d44 	.word	0x08004d44
 8004bbc:	08004d44 	.word	0x08004d44
 8004bc0:	08004d48 	.word	0x08004d48

08004bc4 <memcpy>:
 8004bc4:	440a      	add	r2, r1
 8004bc6:	4291      	cmp	r1, r2
 8004bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bcc:	d100      	bne.n	8004bd0 <memcpy+0xc>
 8004bce:	4770      	bx	lr
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bd6:	4291      	cmp	r1, r2
 8004bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bdc:	d1f9      	bne.n	8004bd2 <memcpy+0xe>
 8004bde:	bd10      	pop	{r4, pc}

08004be0 <memset>:
 8004be0:	4603      	mov	r3, r0
 8004be2:	4402      	add	r2, r0
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d100      	bne.n	8004bea <memset+0xa>
 8004be8:	4770      	bx	lr
 8004bea:	f803 1b01 	strb.w	r1, [r3], #1
 8004bee:	e7f9      	b.n	8004be4 <memset+0x4>

08004bf0 <_init>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	bf00      	nop
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr

08004bfc <_fini>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr
